{
  "version": 3,
  "sources": ["BushShootingService.ts"],
  "sourcesContent": ["import { ConfigManager } from \"./ConfigManager\";\r\nimport { BotModificationService, Logger } from \"./types/spt-types\";\r\n\r\nexport class BushShootingService {\r\n    private configManager: ConfigManager;\r\n    private botModificationService: BotModificationService;\r\n    private logger: Logger;\r\n    private bushConfig: any;\r\n    private vegetationTypes: Set<string> = new Set();\r\n    private activeBots: Map<string, any> = new Map();\r\n\r\n    constructor(configManager: ConfigManager, botModificationService: BotModificationService, logger: Logger) {\r\n        this.configManager = configManager;\r\n        this.botModificationService = botModificationService;\r\n        this.logger = logger;\r\n    }\r\n\r\n    public initialize(): void {\r\n        try {\r\n            this.logger.info(\"[LiveTarkovAI] Initializing BushShootingService...\");\r\n            \r\n            // Load bush shooting configuration\r\n            this.bushConfig = this.configManager.getBushShootingConfig();\r\n            \r\n            if (this.bushConfig.enabled) {\r\n                this.setupBushShootingSystem();\r\n                this.logger.info(\"[LiveTarkovAI] BushShootingService initialized successfully\");\r\n            } else {\r\n                this.logger.info(\"[LiveTarkovAI] BushShootingService disabled in configuration\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error initializing BushShootingService: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup bush shooting system\r\n    private setupBushShootingSystem(): void {\r\n        try {\r\n            // Initialize vegetation types\r\n            this.initializeVegetationTypes();\r\n            \r\n            // Setup shooting prevention systems\r\n            this.setupShootingPrevention();\r\n            \r\n            // Setup tracking systems\r\n            this.setupTrackingSystems();\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bush shooting system setup completed\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up bush shooting system: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Initialize vegetation types\r\n    private initializeVegetationTypes(): void {\r\n        try {\r\n            const vegetationTypes = this.bushConfig.vegetationTypes || [\"bush\", \"tree\", \"grass\", \"foliage\"];\r\n            \r\n            for (const vegetationType of vegetationTypes) {\r\n                this.vegetationTypes.add(vegetationType.toLowerCase());\r\n            }\r\n            \r\n            this.logger.info(`[LiveTarkovAI] Initialized ${this.vegetationTypes.size} vegetation types`);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error initializing vegetation types: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup shooting prevention systems\r\n    private setupShootingPrevention(): void {\r\n        try {\r\n            if (this.bushConfig.preventShootingThroughBushes) {\r\n                this.setupShootingThroughBushPrevention();\r\n            }\r\n            \r\n            if (this.bushConfig.preventShootingFromBushes) {\r\n                this.setupShootingFromBushPrevention();\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Shooting prevention systems configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up shooting prevention: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup shooting through bush prevention\r\n    private setupShootingThroughBushPrevention(): void {\r\n        try {\r\n            // Hook into bot shooting mechanics\r\n            this.hookIntoBotShooting();\r\n            \r\n            // Setup line of sight checks\r\n            this.setupLineOfSightChecks();\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Shooting through bush prevention configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up shooting through bush prevention: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup shooting from bush prevention\r\n    private setupShootingFromBushPrevention(): void {\r\n        try {\r\n            // Hook into bot positioning\r\n            this.hookIntoBotPositioning();\r\n            \r\n            // Setup bush detection\r\n            this.setupBushDetection();\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Shooting from bush prevention configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up shooting from bush prevention: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup tracking systems\r\n    private setupTrackingSystems(): void {\r\n        try {\r\n            if (this.bushConfig.allowTrackingThroughBushes) {\r\n                this.setupBushTracking();\r\n                this.logger.info(\"[LiveTarkovAI] Bush tracking system configured\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up tracking systems: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into bot shooting mechanics\r\n    private hookIntoBotShooting(): void {\r\n        try {\r\n            // This would hook into SPT's bot shooting system\r\n            // For now, we'll implement a basic prevention system\r\n            \r\n            // Monitor bot shooting events\r\n            this.monitorBotShooting();\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bot shooting hooks configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into bot shooting: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup line of sight checks\r\n    private setupLineOfSightChecks(): void {\r\n        try {\r\n            // This would integrate with SPT's line of sight system\r\n            // For now, we'll implement basic vegetation detection\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Line of sight checks configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up line of sight checks: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into bot positioning\r\n    private hookIntoBotPositioning(): void {\r\n        try {\r\n            // This would hook into SPT's bot positioning system\r\n            // For now, we'll implement basic position monitoring\r\n            \r\n            this.monitorBotPositions();\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bot positioning hooks configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into bot positioning: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup bush detection\r\n    private setupBushDetection(): void {\r\n        try {\r\n            // This would integrate with SPT's environment system\r\n            // For now, we'll implement basic detection logic\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bush detection system configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up bush detection: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup bush tracking\r\n    private setupBushTracking(): void {\r\n        try {\r\n            // This would integrate with SPT's tracking system\r\n            // For now, we'll implement basic tracking logic\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bush tracking system configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up bush tracking: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Monitor bot shooting events\r\n    private monitorBotShooting(): void {\r\n        try {\r\n            // This would hook into SPT's bot shooting events\r\n            // For now, we'll implement a basic monitoring system\r\n            \r\n            // Set up periodic checks for bot shooting\r\n            setInterval(() => {\r\n                this.checkBotShooting();\r\n            }, 1000); // Check every second\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bot shooting monitoring configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up bot shooting monitoring: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Monitor bot positions\r\n    private monitorBotPositions(): void {\r\n        try {\r\n            // This would hook into SPT's bot position updates\r\n            // For now, we'll implement a basic monitoring system\r\n            \r\n            // Set up periodic checks for bot positions\r\n            setInterval(() => {\r\n                this.checkBotPositions();\r\n            }, 2000); // Check every 2 seconds\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bot position monitoring configured\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up bot position monitoring: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Check bot shooting for bush violations\r\n    private checkBotShooting(): void {\r\n        try {\r\n            // This would check active bots for shooting violations\r\n            // For now, we'll implement a basic check\r\n            \r\n            for (const [botId, bot] of this.activeBots) {\r\n                if (this.isBotShooting(bot)) {\r\n                    this.handleBotShooting(bot);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error checking bot shooting: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Check bot positions for bush violations\r\n    private checkBotPositions(): void {\r\n        try {\r\n            // This would check active bots for position violations\r\n            // For now, we'll implement a basic check\r\n            \r\n            for (const [botId, bot] of this.activeBots) {\r\n                if (this.isBotInBush(bot)) {\r\n                    this.handleBotInBush(bot);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error checking bot positions: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Check if bot is shooting\r\n    private isBotShooting(bot: any): boolean {\r\n        try {\r\n            // This would check SPT's bot shooting state\r\n            // For now, we'll implement a basic check\r\n            \r\n            return bot && bot.isShooting === true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Check if bot is in bush\r\n    private isBotInBush(bot: any): boolean {\r\n        try {\r\n            // This would check SPT's environment system\r\n            // For now, we'll implement a basic check\r\n            \r\n            if (!bot || !bot.position) return false;\r\n            \r\n            // Check if bot is near vegetation\r\n            return this.isPositionNearVegetation(bot.position);\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Check if position is near vegetation\r\n    private isPositionNearVegetation(position: any): boolean {\r\n        try {\r\n            // This would integrate with SPT's environment system\r\n            // For now, we'll implement a basic check\r\n            \r\n            // Simple distance-based check\r\n            const vegetationPositions = this.getVegetationPositions();\r\n            \r\n            for (const vegPos of vegetationPositions) {\r\n                const distance = this.calculateDistance(position, vegPos);\r\n                if (distance <= this.bushConfig.bushDetectionRange) {\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n            return false;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Get vegetation positions\r\n    private getVegetationPositions(): any[] {\r\n        try {\r\n            // This would get positions from SPT's environment system\r\n            // For now, we'll return empty array\r\n            \r\n            return [];\r\n        } catch (error) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // Calculate distance between two positions\r\n    private calculateDistance(pos1: any, pos2: any): number {\r\n        try {\r\n            if (!pos1 || !pos2 || !pos1.x || !pos1.y || !pos1.z || !pos2.x || !pos2.y || !pos2.z) {\r\n                return Infinity;\r\n            }\r\n            \r\n            const dx = pos1.x - pos2.x;\r\n            const dy = pos1.y - pos2.y;\r\n            const dz = pos1.z - pos2.z;\r\n            \r\n            return Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n        } catch (error) {\r\n            return Infinity;\r\n        }\r\n    }\r\n\r\n    // Handle bot shooting violations\r\n    private handleBotShooting(bot: any): void {\r\n        try {\r\n            if (!bot) return;\r\n            \r\n            // Check if bot is shooting through vegetation\r\n            if (this.isBotShootingThroughVegetation(bot)) {\r\n                this.preventShootingThroughVegetation(bot);\r\n            }\r\n            \r\n            // Check if bot is shooting from vegetation\r\n            if (this.isBotShootingFromVegetation(bot)) {\r\n                this.preventShootingFromVegetation(bot);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error handling bot shooting: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Handle bot in bush violations\r\n    private handleBotInBush(bot: any): void {\r\n        try {\r\n            if (!bot) return;\r\n            \r\n            // Apply bush-specific restrictions\r\n            this.applyBushRestrictions(bot);\r\n            \r\n            // Log the violation\r\n            this.logger.info(`[LiveTarkovAI] Bot ${bot.id || 'unknown'} detected in bush - restrictions applied`);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error handling bot in bush: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Check if bot is shooting through vegetation\r\n    private isBotShootingThroughVegetation(bot: any): boolean {\r\n        try {\r\n            if (!bot || !bot.position || !bot.targetPosition) return false;\r\n            \r\n            // Check if line of sight passes through vegetation\r\n            return this.doesLinePassThroughVegetation(bot.position, bot.targetPosition);\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Check if bot is shooting from vegetation\r\n    private isBotShootingFromVegetation(bot: any): boolean {\r\n        try {\r\n            if (!bot || !bot.position) return false;\r\n            \r\n            // Check if bot is positioned in vegetation\r\n            return this.isPositionInVegetation(bot.position);\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Check if line passes through vegetation\r\n    private doesLinePassThroughVegetation(startPos: any, endPos: any): boolean {\r\n        try {\r\n            // This would integrate with SPT's line of sight system\r\n            // For now, we'll implement a basic check\r\n            \r\n            // Simple check - if both positions are near vegetation, assume line passes through\r\n            return this.isPositionNearVegetation(startPos) || this.isPositionNearVegetation(endPos);\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Check if position is in vegetation\r\n    private isPositionInVegetation(position: any): boolean {\r\n        try {\r\n            // This would integrate with SPT's environment system\r\n            // For now, we'll implement a basic check\r\n            \r\n            // More strict check for being inside vegetation\r\n            const vegetationPositions = this.getVegetationPositions();\r\n            \r\n            for (const vegPos of vegetationPositions) {\r\n                const distance = this.calculateDistance(position, vegPos);\r\n                if (distance <= 5) { // Very close to vegetation\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n            return false;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Prevent shooting through vegetation\r\n    private preventShootingThroughVegetation(bot: any): void {\r\n        try {\r\n            if (!bot) return;\r\n            \r\n            // Cancel the shot\r\n            this.cancelBotShot(bot);\r\n            \r\n            // Apply penalty\r\n            this.applyShootingPenalty(bot);\r\n            \r\n            // Log the prevention\r\n            this.logger.info(`[LiveTarkovAI] Prevented bot ${bot.id || 'unknown'} from shooting through vegetation`);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error preventing shooting through vegetation: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Prevent shooting from vegetation\r\n    private preventShootingFromVegetation(bot: any): void {\r\n        try {\r\n            if (!bot) return;\r\n            \r\n            // Cancel the shot\r\n            this.cancelBotShot(bot);\r\n            \r\n            // Apply penalty\r\n            this.applyShootingPenalty(bot);\r\n            \r\n            // Log the prevention\r\n            this.logger.info(`[LiveTarkovAI] Prevented bot ${bot.id || 'unknown'} from shooting from vegetation`);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error preventing shooting from vegetation: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply bush restrictions\r\n    private applyBushRestrictions(bot: any): void {\r\n        try {\r\n            if (!bot) return;\r\n            \r\n            // Reduce accuracy while in bush\r\n            if (bot.accuracy !== undefined) {\r\n                bot.originalAccuracy = bot.accuracy;\r\n                bot.accuracy = Math.max(0.1, bot.accuracy * 0.3); // 30% of original accuracy\r\n            }\r\n            \r\n            // Increase reaction time while in bush\r\n            if (bot.reactionTime !== undefined) {\r\n                bot.originalReactionTime = bot.reactionTime;\r\n                bot.reactionTime = bot.reactionTime * 2.0; // Double reaction time\r\n            }\r\n            \r\n            // Mark bot as restricted\r\n            bot.bushRestricted = true;\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying bush restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Cancel bot shot\r\n    private cancelBotShot(bot: any): void {\r\n        try {\r\n            if (!bot) return;\r\n            \r\n            // This would integrate with SPT's bot shooting system\r\n            // For now, we'll implement a basic cancellation\r\n            \r\n            // Mark bot as shot cancelled\r\n            bot.shotCancelled = true;\r\n            bot.lastShotTime = Date.now();\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error cancelling bot shot: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply shooting penalty\r\n    private applyShootingPenalty(bot: any): void {\r\n        try {\r\n            if (!bot) return;\r\n            \r\n            // Increase reaction time temporarily\r\n            if (bot.reactionTime !== undefined) {\r\n                bot.reactionTime = bot.reactionTime * 1.5; // 50% increase\r\n                \r\n                // Reset after penalty duration\r\n                setTimeout(() => {\r\n                    if (bot.reactionTime && bot.originalReactionTime) {\r\n                        bot.reactionTime = bot.originalReactionTime;\r\n                    }\r\n                }, 5000); // 5 second penalty\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying shooting penalty: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Add bot to monitoring\r\n    public addBot(botId: string, bot: any): void {\r\n        try {\r\n            if (!botId || !bot) return;\r\n            \r\n            this.activeBots.set(botId, bot);\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error adding bot to monitoring: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Remove bot from monitoring\r\n    public removeBot(botId: string): void {\r\n        try {\r\n            if (!botId) return;\r\n            \r\n            this.activeBots.delete(botId);\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error removing bot from monitoring: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Get bush shooting configuration\r\n    public getBushConfig(): any {\r\n        return this.bushConfig;\r\n    }\r\n\r\n    // Update bush shooting configuration\r\n    public updateBushConfig(newConfig: any): void {\r\n        try {\r\n            this.bushConfig = { ...this.bushConfig, ...newConfig };\r\n            \r\n            if (this.bushConfig.enabled) {\r\n                this.setupBushShootingSystem();\r\n                this.logger.info(\"[LiveTarkovAI] Bush shooting configuration updated\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error updating bush shooting configuration: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Get active bot count\r\n    public getActiveBotCount(): number {\r\n        return this.activeBots.size;\r\n    }\r\n\r\n    // Get vegetation types\r\n    public getVegetationTypes(): Set<string> {\r\n        return new Set(this.vegetationTypes);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
