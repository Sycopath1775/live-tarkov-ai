{
  "version": 3,
  "sources": ["BushShootingService.ts"],
  "sourcesContent": ["import { injectable } from \"tsyringe\";\r\n\r\nexport interface IBushShootingConfig {\r\n    enabled: boolean;\r\n    preventShootingThroughBushes: boolean;\r\n    preventShootingFromBushes: boolean;\r\n    allowTrackingThroughBushes: boolean;\r\n    bushDetectionRange: number;\r\n    lineOfSightCheck: boolean;\r\n    vegetationTypes: string[];\r\n}\r\n\r\n@injectable()\r\nexport class BushShootingService {\r\n    private config: IBushShootingConfig;\r\n    private activeBushes: Map<string, any> = new Map();\r\n    private botShootingStates: Map<string, boolean> = new Map();\r\n\r\n    constructor(config: IBushShootingConfig) {\r\n        this.config = config;\r\n        if (this.config.enabled) {\r\n            this.initializeBushDetection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize bush detection system\r\n     */\r\n    private initializeBushDetection(): void {\r\n        try {\r\n            console.log(\"[Live Tarkov - AI] Bush shooting restrictions initialized\");\r\n            this.setupBushDetection();\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error initializing bush detection:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up bush detection system\r\n     */\r\n    private setupBushDetection(): void {\r\n        try {\r\n            // Set up vegetation detection\r\n            this.setupVegetationDetection();\r\n            \r\n            // Set up shooting restrictions\r\n            this.setupShootingRestrictions();\r\n            \r\n            console.log(\"[Live Tarkov - AI] Bush detection system configured\");\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error setting up bush detection:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up vegetation detection\r\n     */\r\n    private setupVegetationDetection(): void {\r\n        try {\r\n            // This would integrate with the game's vegetation system\r\n            // For now, we'll implement a basic detection system\r\n            console.log(\"[Live Tarkov - AI] Vegetation detection configured\");\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error setting up vegetation detection:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up shooting restrictions\r\n     */\r\n    private setupShootingRestrictions(): void {\r\n        try {\r\n            // Hook into the shooting system to prevent bush shooting\r\n            this.hookIntoShootingSystem();\r\n            console.log(\"[Live Tarkov - AI] Shooting restrictions configured\");\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error setting up shooting restrictions:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook into the shooting system\r\n     */\r\n    private hookIntoShootingSystem(): void {\r\n        try {\r\n            // This would hook into the game's shooting mechanics\r\n            // For now, we'll implement a basic restriction system\r\n            console.log(\"[Live Tarkov - AI] Shooting system hooks installed\");\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error hooking into shooting system:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a bot can shoot at a target\r\n     */\r\n    public canBotShoot(botId: string, targetPosition: any, botPosition: any): boolean {\r\n        if (!this.config.enabled) return true;\r\n\r\n        try {\r\n            // Check if bot is in a bush\r\n            if (this.isBotInBush(botPosition)) {\r\n                if (this.config.preventShootingFromBushes) {\r\n                    console.log(`[Live Tarkov - AI] Bot ${botId} prevented from shooting from bush`);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // Check if there's a bush between bot and target\r\n            if (this.config.preventShootingThroughBushes) {\r\n                if (this.isBushBetweenPositions(botPosition, targetPosition)) {\r\n                    console.log(`[Live Tarkov - AI] Bot ${botId} prevented from shooting through bush`);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`[Live Tarkov - AI] Error checking bot shooting permission for ${botId}:`, error);\r\n            return true; // Default to allowing if there's an error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a bot is in a bush\r\n     */\r\n    private isBotInBush(botPosition: any): boolean {\r\n        try {\r\n            // This would check if the bot's position overlaps with vegetation\r\n            // For now, we'll implement a basic check\r\n            return this.checkVegetationOverlap(botPosition);\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error checking if bot is in bush:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if there's a bush between two positions\r\n     */\r\n    private isBushBetweenPositions(startPos: any, endPos: any): boolean {\r\n        try {\r\n            // This would perform a line-of-sight check for vegetation\r\n            // For now, we'll implement a basic check\r\n            return this.checkLineOfSightForVegetation(startPos, endPos);\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error checking bush between positions:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check vegetation overlap at a position\r\n     */\r\n    private checkVegetationOverlap(position: any): boolean {\r\n        try {\r\n            // This would check for vegetation at the given position\r\n            // For now, we'll return false (no vegetation detected)\r\n            return false;\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error checking vegetation overlap:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check line of sight for vegetation\r\n     */\r\n    private checkLineOfSightForVegetation(startPos: any, endPos: any): boolean {\r\n        try {\r\n            // This would perform a raycast check for vegetation\r\n            // For now, we'll return false (no vegetation in line of sight)\r\n            return false;\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error checking line of sight for vegetation:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allow bot to track target through bushes (but not shoot)\r\n     */\r\n    public allowTrackingThroughBushes(botId: string, targetPosition: any, botPosition: any): boolean {\r\n        if (!this.config.enabled || !this.config.allowTrackingThroughBushes) return true;\r\n\r\n        try {\r\n            // Bots can always track through bushes, just not shoot\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`[Live Tarkov - AI] Error checking tracking permission for ${botId}:`, error);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a bush location\r\n     */\r\n    public registerBush(bushId: string, bushData: any): void {\r\n        try {\r\n            this.activeBushes.set(bushId, bushData);\r\n            console.log(`[Live Tarkov - AI] Bush ${bushId} registered`);\r\n        } catch (error) {\r\n            console.error(`[Live Tarkov - AI] Error registering bush ${bushId}:`, error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregister a bush location\r\n     */\r\n    public unregisterBush(bushId: string): void {\r\n        try {\r\n            this.activeBushes.delete(bushId);\r\n            console.log(`[Live Tarkov - AI] Bush ${bushId} unregistered`);\r\n        } catch (error) {\r\n            console.error(`[Live Tarkov - AI] Error unregistering bush ${bushId}:`, error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get bush shooting restriction status\r\n     */\r\n    public getRestrictionStatus(): any {\r\n        return {\r\n            enabled: this.config.enabled,\r\n            preventShootingThroughBushes: this.config.preventShootingThroughBushes,\r\n            preventShootingFromBushes: this.config.preventShootingFromBushes,\r\n            allowTrackingThroughBushes: this.config.allowTrackingThroughBushes,\r\n            bushDetectionRange: this.config.bushDetectionRange,\r\n            activeBushes: this.activeBushes.size,\r\n            restrictedBots: this.botShootingStates.size\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Clean up bush shooting service\r\n     */\r\n    public cleanup(): void {\r\n        try {\r\n            this.activeBushes.clear();\r\n            this.botShootingStates.clear();\r\n            console.log(\"[Live Tarkov - AI] Bush shooting service cleaned up\");\r\n        } catch (error) {\r\n            console.error(\"[Live Tarkov - AI] Error cleaning up bush shooting service:\", error);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
