{
  "version": 3,
  "sources": ["FikaIntegrationService.ts"],
  "sourcesContent": ["import { ConfigManager } from \"./ConfigManager\";\r\nimport { BotController, Logger } from \"./types/spt-types\";\r\n\r\nexport class FikaIntegrationService {\r\n    private configManager: ConfigManager;\r\n    private botController: BotController;\r\n    private logger: Logger;\r\n    private fikaConfig: any;\r\n    private fikaAvailable: boolean = false;\r\n    private fikaService: any = null;\r\n\r\n    constructor(configManager: ConfigManager, botController: BotController, logger: Logger) {\r\n        this.configManager = configManager;\r\n        this.botController = botController;\r\n        this.logger = logger;\r\n    }\r\n\r\n    public initialize(): void {\r\n        try {\r\n            this.logger.info(\"[LiveTarkovAI] Initializing Fika integration...\");\r\n            \r\n            // Load Fika integration configuration\r\n            this.fikaConfig = this.configManager.getFikaIntegrationConfig();\r\n            \r\n            if (this.fikaConfig.enabled) {\r\n                this.checkFikaAvailability();\r\n                \r\n                if (this.fikaAvailable) {\r\n                    this.setupFikaIntegration();\r\n                    this.logger.info(\"[LiveTarkovAI] Fika integration initialized successfully\");\r\n                } else {\r\n                    this.logger.info(\"[LiveTarkovAI] Fika not available - integration disabled\");\r\n                }\r\n            } else {\r\n                this.logger.info(\"[LiveTarkovAI] Fika integration disabled in configuration\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error initializing Fika integration: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Check if Fika mod is available\r\n    private checkFikaAvailability(): void {\r\n        try {\r\n            // Method 1: Try to require Fika directly\r\n            try {\r\n                this.fikaService = require(\"fika-server\");\r\n                this.fikaAvailable = true;\r\n                return;\r\n            } catch (error) {\r\n                // Continue to next method\r\n            }\r\n\r\n            // Method 2: Check for Fika in global scope\r\n            if (globalThis.FikaService || globalThis.FikaServerService || globalThis.fika) {\r\n                this.fikaService = globalThis.FikaService || globalThis.FikaServerService || globalThis.fika;\r\n                this.fikaAvailable = true;\r\n                return;\r\n            }\r\n\r\n            // Method 3: Check for Fika in SPT container if available\r\n            try {\r\n                if (globalThis.SPT_CONTAINER) {\r\n                    const container = globalThis.SPT_CONTAINER;\r\n                    if (container.resolve && container.resolve(\"FikaService\")) {\r\n                        this.fikaService = container.resolve(\"FikaService\");\r\n                        this.fikaAvailable = true;\r\n                        return;\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                // Continue to next method\r\n            }\r\n\r\n            this.fikaAvailable = false;\r\n        } catch (error) {\r\n            this.fikaAvailable = false;\r\n        }\r\n    }\r\n\r\n    // Setup Fika integration\r\n    private setupFikaIntegration(): void {\r\n        try {\r\n            if (!this.fikaService) return;\r\n            \r\n            // Apply Fika integration features\r\n            this.applyFikaIntegrationFeatures();\r\n            \r\n            // Hook into Fika services if available\r\n            this.hookIntoFikaServices();\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Fika integration setup completed\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up Fika integration: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply Fika integration features\r\n    private applyFikaIntegrationFeatures(): void {\r\n        try {\r\n            // Apply multiplayer compatibility\r\n            if (this.fikaConfig.multiplayerCompatibility) {\r\n                this.setupMultiplayerCompatibility();\r\n            }\r\n            \r\n            // Apply player scav handling\r\n            if (this.fikaConfig.playerScavHandling) {\r\n                this.setupPlayerScavHandling();\r\n            }\r\n            \r\n            // Apply bot brain optimization\r\n            if (this.fikaConfig.botBrainOptimization) {\r\n                this.setupBotBrainOptimization();\r\n            }\r\n            \r\n            // Apply bot conflict prevention\r\n            if (this.fikaConfig.preventBotConflicts) {\r\n                this.setupBotConflictPrevention();\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Fika integration features applied\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying Fika integration features: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup multiplayer compatibility\r\n    private setupMultiplayerCompatibility(): void {\r\n        try {\r\n            if (!this.fikaService || !this.fikaService.setupMultiplayerCompatibility) return;\r\n            \r\n            // Setup multiplayer compatibility through Fika service\r\n            this.fikaService.setupMultiplayerCompatibility({\r\n                syncBotStates: true,\r\n                preventDesync: true,\r\n                handleMultiplePlayers: true\r\n            });\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Multiplayer compatibility configured with Fika\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up multiplayer compatibility: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup player scav handling\r\n    private setupPlayerScavHandling(): void {\r\n        try {\r\n            if (!this.fikaService || !this.fikaService.setupPlayerScavHandling) return;\r\n            \r\n            // Setup player scav handling through Fika service\r\n            this.fikaService.setupPlayerScavHandling({\r\n                preventBotConflicts: true,\r\n                syncPlayerScavStates: true,\r\n                handlePlayerScavSpawns: true\r\n            });\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Player scav handling configured with Fika\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up player scav handling: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup bot brain optimization\r\n    private setupBotBrainOptimization(): void {\r\n        try {\r\n            if (!this.fikaService || !this.fikaService.setupBotBrainOptimization) return;\r\n            \r\n            // Setup bot brain optimization through Fika service\r\n            this.fikaService.setupBotBrainOptimization({\r\n                optimizePathfinding: true,\r\n                reduceCPUUsage: true,\r\n                improveBotIntelligence: true\r\n            });\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bot brain optimization configured with Fika\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up bot brain optimization: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup bot conflict prevention\r\n    private setupBotConflictPrevention(): void {\r\n        try {\r\n            if (!this.fikaService || !this.fikaService.setupBotConflictPrevention) return;\r\n            \r\n            // Setup bot conflict prevention through Fika service\r\n            this.fikaService.setupBotConflictPrevention({\r\n                preventDuplicateSpawns: true,\r\n                handleBotCollisions: true,\r\n                manageBotTerritories: true\r\n            });\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Bot conflict prevention configured with Fika\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up bot conflict prevention: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into Fika services\r\n    private hookIntoFikaServices(): void {\r\n        try {\r\n            if (!this.fikaService) return;\r\n            \r\n            // Hook into Fika bot controller if available\r\n            if (this.fikaService.botController) {\r\n                this.hookIntoFikaBotController(this.fikaService.botController);\r\n            }\r\n            \r\n            // Hook into Fika spawn service if available\r\n            if (this.fikaService.spawnService) {\r\n                this.hookIntoFikaSpawnService(this.fikaService.spawnService);\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Successfully hooked into Fika services\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into Fika services: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into Fika bot controller\r\n    private hookIntoFikaBotController(fikaBotController: any): void {\r\n        try {\r\n            if (!fikaBotController || typeof fikaBotController !== \"object\") return;\r\n            \r\n            // Store reference to Fika bot controller\r\n            this.botController = fikaBotController;\r\n            \r\n            // Hook into bot management methods if they exist\r\n            if (fikaBotController.getBots && typeof fikaBotController.getBots === \"function\") {\r\n                const originalGetBots = fikaBotController.getBots;\r\n                fikaBotController.getBots = () => {\r\n                    // Get bots through Fika service\r\n                    const bots = originalGetBots.call(fikaBotController);\r\n                    \r\n                    // Apply our custom modifications to bots\r\n                    this.applyCustomBotModifications(bots);\r\n                    \r\n                    return bots;\r\n                };\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Successfully hooked into Fika bot controller\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into Fika bot controller: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into Fika spawn service\r\n    private hookIntoFikaSpawnService(fikaSpawnService: any): void {\r\n        try {\r\n            if (!fikaSpawnService || typeof fikaSpawnService !== \"object\") return;\r\n            \r\n            // Hook into spawn methods if they exist\r\n            if (fikaSpawnService.spawnBot && typeof fikaSpawnService.spawnBot === \"function\") {\r\n                const originalSpawnBot = fikaSpawnService.spawnBot;\r\n                fikaSpawnService.spawnBot = async (botType: string, location: string, count: number) => {\r\n                    // Apply our custom spawn logic before Fika spawning\r\n                    const modifiedCount = this.calculateCustomBotCount(botType, location, count);\r\n                    const modifiedBotType = this.getModifiedBotType(botType);\r\n                    \r\n                    // Call original Fika spawn method with our modifications\r\n                    return await originalSpawnBot.call(fikaSpawnService, modifiedBotType, location, modifiedCount);\r\n                };\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Successfully hooked into Fika spawn service\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into Fika spawn service: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply custom bot modifications\r\n    private applyCustomBotModifications(bots: any[]): void {\r\n        try {\r\n            if (!Array.isArray(bots)) return;\r\n            \r\n            for (const bot of bots) {\r\n                // Apply our custom modifications based on configuration\r\n                const config = this.configManager.getConfig();\r\n                const botTypeConfig = config.botTypeSettings[bot.Role];\r\n                \r\n                if (botTypeConfig && botTypeConfig.enabled) {\r\n                    // Apply gear restrictions\r\n                    if (botTypeConfig.gearRestrictions) {\r\n                        this.applyGearRestrictions(bot, botTypeConfig.gearRestrictions);\r\n                    }\r\n                    \r\n                    // Apply behavior modifications\r\n                    if (botTypeConfig.liveTarkovBehavior) {\r\n                        this.applyBehaviorModifications(bot, botTypeConfig.liveTarkovBehavior);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying custom bot modifications: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear restrictions to bot\r\n    private applyGearRestrictions(bot: any, gearRestrictions: any): void {\r\n        try {\r\n            // Apply weapon restrictions\r\n            if (gearRestrictions.weapons && gearRestrictions.weapons.length > 0) {\r\n                bot.weaponRestrictions = gearRestrictions.weapons;\r\n            }\r\n            \r\n            // Apply armor restrictions\r\n            if (gearRestrictions.armor && gearRestrictions.armor.length > 0) {\r\n                bot.armorRestrictions = gearRestrictions.armor;\r\n            }\r\n            \r\n            // Apply item restrictions\r\n            if (gearRestrictions.items && gearRestrictions.items.length > 0) {\r\n                bot.itemRestrictions = gearRestrictions.items;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying gear restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply behavior modifications to bot\r\n    private applyBehaviorModifications(bot: any, behavior: any): void {\r\n        try {\r\n            // Apply accuracy modification\r\n            if (behavior.accuracy !== undefined) {\r\n                bot.accuracy = behavior.accuracy;\r\n            }\r\n            \r\n            // Apply reaction time modification\r\n            if (behavior.reactionTime !== undefined) {\r\n                bot.reactionTime = behavior.reactionTime;\r\n            }\r\n            \r\n            // Apply aggression modification\r\n            if (behavior.aggression !== undefined) {\r\n                bot.aggression = behavior.aggression;\r\n            }\r\n            \r\n            // Apply hearing modification\r\n            if (behavior.hearing !== undefined) {\r\n                bot.hearing = behavior.hearing;\r\n            }\r\n            \r\n            // Apply vision modification\r\n            if (behavior.vision !== undefined) {\r\n                bot.vision = behavior.vision;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying behavior modifications: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Calculate custom bot count based on configuration\r\n    private calculateCustomBotCount(botType: string, location: string, originalCount: number): number {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const mapConfig = config.mapSettings[location];\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) return originalCount;\r\n            \r\n            const botTypeConfig = mapConfig.botTypes[botType];\r\n            if (!botTypeConfig || !botTypeConfig.enabled) return 0;\r\n            \r\n            // Use configured max count or original count\r\n            return Math.min(botTypeConfig.maxCount, originalCount);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error calculating custom bot count: ${error}`);\r\n            return originalCount;\r\n        }\r\n    }\r\n\r\n    // Get modified bot type based on configuration\r\n    private getModifiedBotType(originalBotType: string): string {\r\n        try {\r\n            // For now, return original bot type\r\n            // This can be enhanced to modify bot types based on configuration\r\n            return originalBotType;\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error getting modified bot type: ${error}`);\r\n            return originalBotType;\r\n        }\r\n    }\r\n\r\n    // Check if Fika integration is available\r\n    public isFikaAvailable(): boolean {\r\n        return this.fikaAvailable;\r\n    }\r\n\r\n    // Get Fika configuration\r\n    public getFikaConfig(): any {\r\n        return this.fikaConfig;\r\n    }\r\n\r\n    // Update Fika configuration\r\n    public updateFikaConfig(newConfig: any): void {\r\n        try {\r\n            this.fikaConfig = { ...this.fikaConfig, ...newConfig };\r\n            \r\n            if (this.fikaConfig.enabled && this.fikaAvailable) {\r\n                this.setupFikaIntegration();\r\n                this.logger.info(\"[LiveTarkovAI] Fika configuration updated\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error updating Fika configuration: ${error}`);\r\n        }\r\n    }\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
