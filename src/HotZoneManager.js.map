{
  "version": 3,
  "sources": ["HotZoneManager.ts"],
  "sourcesContent": ["import { ConfigManager } from \"./ConfigManager\";\r\nimport { LocationController, ILocationBase, Logger } from \"./types/spt-types\";\r\n\r\nexport class HotZoneManager {\r\n    private configManager: ConfigManager;\r\n    private locationController: LocationController;\r\n    private logger: Logger;\r\n    private hotZoneConfig: any;\r\n    private activeHotZones: Map<string, any> = new Map();\r\n\r\n    constructor(configManager: ConfigManager, locationController: LocationController, logger: Logger) {\r\n        this.configManager = configManager;\r\n        this.locationController = locationController;\r\n        this.logger = logger;\r\n    }\r\n\r\n    public initialize(): void {\r\n        try {\r\n            this.logger.info(\"[LiveTarkovAI] Initializing HotZoneManager...\");\r\n            \r\n            // Load hot zone configuration\r\n            this.hotZoneConfig = this.configManager.loadHotZoneConfig();\r\n            \r\n            if (this.hotZoneConfig.enabled) {\r\n                this.setupHotZones();\r\n                this.logger.info(\"[LiveTarkovAI] HotZoneManager initialized successfully\");\r\n            } else {\r\n                this.logger.info(\"[LiveTarkovAI] HotZoneManager disabled in configuration\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error initializing HotZoneManager: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into location controller for spawn management\r\n    public hookIntoLocationController(locationController: any): void {\r\n        try {\r\n            if (!locationController || typeof locationController !== \"object\") return;\r\n            \r\n            // Store reference to location controller\r\n            this.locationController = locationController;\r\n            \r\n            // Hook into location spawn methods if they exist\r\n            if (locationController.getSpawnPoints && typeof locationController.getSpawnPoints === \"function\") {\r\n                const originalGetSpawnPoints = locationController.getSpawnPoints;\r\n                locationController.getSpawnPoints = (locationName: string) => {\r\n                    // Apply our hot zone modifications to spawn points\r\n                    const originalSpawnPoints = originalGetSpawnPoints.call(locationController, locationName);\r\n                    return this.modifySpawnPointsForHotZones(locationName, originalSpawnPoints);\r\n                };\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Successfully hooked into location controller\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into location controller: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Setup hot zones based on configuration\r\n    private setupHotZones(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            \r\n            // Create hot zones for each map\r\n            for (const [mapName, mapConfig] of Object.entries(config.mapSettings || {})) {\r\n                if (mapConfig && mapConfig.enabled) {\r\n                    this.createHotZonesForMap(mapName, mapConfig);\r\n                }\r\n            }\r\n            \r\n            this.logger.info(`[LiveTarkovAI] Created ${this.activeHotZones.size} hot zones`);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up hot zones: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Create hot zones for a specific map\r\n    private createHotZonesForMap(mapName: string, mapConfig: any): void {\r\n        try {\r\n            const hotZones: any[] = [];\r\n            \r\n            // Create boss zones\r\n            if (mapConfig.spawnPoints) {\r\n                for (const [spawnPointName, spawnPoint] of Object.entries(mapConfig.spawnPoints)) {\r\n                    if (spawnPoint && typeof spawnPoint === 'object' && 'enabled' in spawnPoint && spawnPoint.enabled) {\r\n                        if (spawnPointName.includes('boss') || spawnPointName.includes('Boss')) {\r\n                            hotZones.push({\r\n                                name: `${mapName}_${spawnPointName}`,\r\n                                type: 'boss',\r\n                                priority: spawnPoint.priority || 1,\r\n                                location: mapName,\r\n                                spawnPoint: spawnPointName,\r\n                                maxBots: spawnPoint.maxBots || 1,\r\n                                botTypes: spawnPoint.botTypes || [],\r\n                                excludeRegularScavs: true,\r\n                                minDistanceFromRegularSpawns: 80\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Create quest-related hot zones\r\n            this.createQuestHotZones(mapName, mapConfig, hotZones);\r\n            \r\n            // Create high-traffic hot zones\r\n            this.createHighTrafficHotZones(mapName, mapConfig, hotZones);\r\n            \r\n            // Store hot zones for this map\r\n            if (hotZones.length > 0) {\r\n                this.activeHotZones.set(mapName, hotZones);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error creating hot zones for map ${mapName}: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Create quest-related hot zones\r\n    private createQuestHotZones(mapName: string, mapConfig: any, hotZones: any[]): void {\r\n        try {\r\n            // Define quest locations for each map\r\n            const questLocations: { [key: string]: any[] } = {\r\n                'bigmap': [\r\n                    { name: 'dorms', priority: 2, maxBots: 3, botTypes: ['assault', 'pmcbear'] },\r\n                    { name: 'gas_station', priority: 2, maxBots: 2, botTypes: ['assault'] },\r\n                    { name: 'construction', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'shoreline': [\r\n                    { name: 'resort', priority: 3, maxBots: 4, botTypes: ['assault', 'pmcbear'] },\r\n                    { name: 'pier', priority: 2, maxBots: 2, botTypes: ['assault'] },\r\n                    { name: 'gas_station', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'lighthouse': [\r\n                    { name: 'water_treatment', priority: 3, maxBots: 3, botTypes: ['assault', 'pmcbear'] },\r\n                    { name: 'mountain', priority: 2, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'woods': [\r\n                    { name: 'sawmill', priority: 2, maxBots: 3, botTypes: ['assault', 'pmcbear'] },\r\n                    { name: 'scav_house', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'reserve': [\r\n                    { name: 'bunker', priority: 3, maxBots: 4, botTypes: ['assault', 'pmcbear'] },\r\n                    { name: 'heli_pad', priority: 2, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'streets': [\r\n                    { name: 'lexos', priority: 3, maxBots: 3, botTypes: ['assault', 'pmcbear'] },\r\n                    { name: 'chekannaya', priority: 2, maxBots: 2, botTypes: ['assault'] }\r\n                ]\r\n            };\r\n            \r\n            const mapQuestLocations = questLocations[mapName] || [];\r\n            \r\n            for (const questLocation of mapQuestLocations) {\r\n                hotZones.push({\r\n                    name: `${mapName}_${questLocation.name}`,\r\n                    type: 'quest',\r\n                    priority: questLocation.priority,\r\n                    location: mapName,\r\n                    spawnPoint: questLocation.name,\r\n                    maxBots: questLocation.maxBots,\r\n                    botTypes: questLocation.botTypes,\r\n                    excludeRegularScavs: false,\r\n                    minDistanceFromRegularSpawns: 50\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error creating quest hot zones for map ${mapName}: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Create high-traffic hot zones\r\n    private createHighTrafficHotZones(mapName: string, mapConfig: any, hotZones: any[]): void {\r\n        try {\r\n            // Define high-traffic locations for each map\r\n            const highTrafficLocations: { [key: string]: any[] } = {\r\n                'bigmap': [\r\n                    { name: 'crossroads', priority: 1, maxBots: 2, botTypes: ['assault'] },\r\n                    { name: 'old_gas', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'shoreline': [\r\n                    { name: 'village', priority: 1, maxBots: 2, botTypes: ['assault'] },\r\n                    { name: 'power_station', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'lighthouse': [\r\n                    { name: 'village', priority: 1, maxBots: 2, botTypes: ['assault'] },\r\n                    { name: 'rocks', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'woods': [\r\n                    { name: 'village', priority: 1, maxBots: 2, botTypes: ['assault'] },\r\n                    { name: 'lumber_mill', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'reserve': [\r\n                    { name: 'village', priority: 1, maxBots: 2, botTypes: ['assault'] },\r\n                    { name: 'garage', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ],\r\n                'streets': [\r\n                    { name: 'village', priority: 1, maxBots: 2, botTypes: ['assault'] },\r\n                    { name: 'garage', priority: 1, maxBots: 2, botTypes: ['assault'] }\r\n                ]\r\n            };\r\n            \r\n            const mapHighTrafficLocations = highTrafficLocations[mapName] || [];\r\n            \r\n            for (const highTrafficLocation of mapHighTrafficLocations) {\r\n                hotZones.push({\r\n                    name: `${mapName}_${highTrafficLocation.name}`,\r\n                    type: 'high_traffic',\r\n                    priority: highTrafficLocation.priority,\r\n                    location: mapName,\r\n                    spawnPoint: highTrafficLocation.name,\r\n                    maxBots: highTrafficLocation.maxBots,\r\n                    botTypes: highTrafficLocation.botTypes,\r\n                    excludeRegularScavs: false,\r\n                    minDistanceFromRegularSpawns: 30\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error creating high-traffic hot zones for map ${mapName}: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify spawn points based on hot zones\r\n    private modifySpawnPointsForHotZones(locationName: string, originalSpawnPoints: any[]): any[] {\r\n        try {\r\n            const hotZones = this.activeHotZones.get(locationName);\r\n            if (!hotZones || hotZones.length === 0) {\r\n                return originalSpawnPoints;\r\n            }\r\n            \r\n            const modifiedSpawnPoints = [...originalSpawnPoints];\r\n            \r\n            // Apply hot zone modifications\r\n            for (const hotZone of hotZones) {\r\n                this.applyHotZoneToSpawnPoints(hotZone, modifiedSpawnPoints);\r\n            }\r\n            \r\n            return modifiedSpawnPoints;\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error modifying spawn points for hot zones: ${error}`);\r\n            return originalSpawnPoints;\r\n        }\r\n    }\r\n\r\n    // Apply hot zone modifications to spawn points\r\n    private applyHotZoneToSpawnPoints(hotZone: any, spawnPoints: any[]): void {\r\n        try {\r\n            // Find spawn points near the hot zone\r\n            for (const spawnPoint of spawnPoints) {\r\n                if (this.isSpawnPointNearHotZone(spawnPoint, hotZone)) {\r\n                    // Apply hot zone modifications\r\n                    this.modifySpawnPointForHotZone(spawnPoint, hotZone);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying hot zone to spawn points: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Check if spawn point is near hot zone\r\n    private isSpawnPointNearHotZone(spawnPoint: any, hotZone: any): boolean {\r\n        try {\r\n            // Simple distance check - can be enhanced with actual coordinates\r\n            if (spawnPoint.name && hotZone.spawnPoint) {\r\n                return spawnPoint.name.toLowerCase().includes(hotZone.spawnPoint.toLowerCase()) ||\r\n                       hotZone.spawnPoint.toLowerCase().includes(spawnPoint.name.toLowerCase());\r\n            }\r\n            return false;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Modify spawn point based on hot zone\r\n    private modifySpawnPointForHotZone(spawnPoint: any, hotZone: any): void {\r\n        try {\r\n            // Apply hot zone priority\r\n            if (hotZone.priority > (spawnPoint.priority || 1)) {\r\n                spawnPoint.priority = hotZone.priority;\r\n            }\r\n            \r\n            // Apply bot type restrictions\r\n            if (hotZone.botTypes && hotZone.botTypes.length > 0) {\r\n                if (!spawnPoint.botTypes) {\r\n                    spawnPoint.botTypes = [];\r\n                }\r\n                // Add hot zone bot types if not already present\r\n                for (const botType of hotZone.botTypes) {\r\n                    if (!spawnPoint.botTypes.includes(botType)) {\r\n                        spawnPoint.botTypes.push(botType);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Apply exclusion rules\r\n            if (hotZone.excludeRegularScavs) {\r\n                spawnPoint.excludeRegularScavs = true;\r\n            }\r\n            \r\n            // Apply distance restrictions\r\n            if (hotZone.minDistanceFromRegularSpawns) {\r\n                spawnPoint.minDistanceFromRegularSpawns = hotZone.minDistanceFromRegularSpawns;\r\n            }\r\n            \r\n            // Mark spawn point as modified by hot zone\r\n            spawnPoint.hotZoneModified = true;\r\n            spawnPoint.hotZoneName = hotZone.name;\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error modifying spawn point for hot zone: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Get hot zone information for a specific map\r\n    public getHotZonesForMap(mapName: string): any[] {\r\n        try {\r\n            return this.activeHotZones.get(mapName) || [];\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error getting hot zones for map ${mapName}: ${error}`);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // Get all active hot zones\r\n    public getAllHotZones(): Map<string, any[]> {\r\n        try {\r\n            return this.activeHotZones;\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error getting all hot zones: ${error}`);\r\n            return new Map();\r\n        }\r\n    }\r\n\r\n    // Update hot zone configuration\r\n    public updateHotZoneConfig(newConfig: any): void {\r\n        try {\r\n            this.hotZoneConfig = { ...this.hotZoneConfig, ...newConfig };\r\n            \r\n            if (this.hotZoneConfig.enabled) {\r\n                this.setupHotZones();\r\n                this.logger.info(\"[LiveTarkovAI] Hot zone configuration updated\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error updating hot zone configuration: ${error}`);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
