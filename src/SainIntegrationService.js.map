{
  "version": 3,
  "sources": ["SainIntegrationService.ts"],
  "sourcesContent": ["import { ConfigManager } from \"./ConfigManager\";\r\nimport { BotModificationService, Logger } from \"./types/spt-types\";\r\n\r\nexport class SainIntegrationService {\r\n    private configManager: ConfigManager;\r\n    private botModificationService: BotModificationService;\r\n    private logger: Logger;\r\n    private sainConfig: any;\r\n    private sainAvailable: boolean = false;\r\n    private sainService: any = null;\r\n\r\n    constructor(configManager: ConfigManager, botModificationService: BotModificationService, logger: Logger) {\r\n        this.configManager = configManager;\r\n        this.botModificationService = botModificationService;\r\n        this.logger = logger;\r\n    }\r\n\r\n    public initialize(): void {\r\n        try {\r\n            this.logger.info(\"[LiveTarkovAI] Initializing SAIN integration...\");\r\n            \r\n            // Load SAIN integration configuration\r\n            this.sainConfig = this.configManager.getSainIntegrationConfig();\r\n            \r\n            if (this.sainConfig.enabled) {\r\n                this.checkSAINAvailability();\r\n                \r\n                if (this.sainAvailable) {\r\n                    this.setupSAINIntegration();\r\n                    this.logger.info(\"[LiveTarkovAI] SAIN integration initialized successfully\");\r\n                } else {\r\n                    this.logger.info(\"[LiveTarkovAI] SAIN not available - integration disabled\");\r\n                }\r\n            } else {\r\n                this.logger.info(\"[LiveTarkovAI] SAIN integration disabled in configuration\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error initializing SAIN integration: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Check if SAIN mod is available\r\n    private checkSAINAvailability(): void {\r\n        try {\r\n            // Method 1: Try to require SAIN directly\r\n            try {\r\n                this.sainService = require(\"zSolarint-SAIN-ServerMod\");\r\n                this.sainAvailable = true;\r\n                return;\r\n            } catch (error) {\r\n                // Continue to next method\r\n            }\r\n\r\n            // Method 2: Check for SAIN in global scope\r\n            if (globalThis.SAIN || globalThis.SainService || globalThis.sain) {\r\n                this.sainService = globalThis.SAIN || globalThis.SainService || globalThis.sain;\r\n                this.sainAvailable = true;\r\n                return;\r\n            }\r\n\r\n            // Method 3: Check for SAIN in SPT container if available\r\n            try {\r\n                if (globalThis.SPT_CONTAINER) {\r\n                    const container = globalThis.SPT_CONTAINER;\r\n                    if (container.resolve && container.resolve(\"SAINService\")) {\r\n                        this.sainService = container.resolve(\"SAINService\");\r\n                        this.sainAvailable = true;\r\n                        return;\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                // Continue to next method\r\n            }\r\n\r\n            this.sainAvailable = false;\r\n        } catch (error) {\r\n            this.sainAvailable = false;\r\n        }\r\n    }\r\n\r\n    // Setup SAIN integration\r\n    private setupSAINIntegration(): void {\r\n        try {\r\n            if (!this.sainService) return;\r\n            \r\n            // Apply SAIN behavior modifications\r\n            this.applySAINBehaviorModifications();\r\n            \r\n            // Hook into SAIN services if available\r\n            this.hookIntoSAINServices();\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] SAIN integration setup completed\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error setting up SAIN integration: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply SAIN behavior modifications\r\n    private applySAINBehaviorModifications(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            \r\n            // Apply scav behavior modifications\r\n            if (this.sainConfig.scavBehavior) {\r\n                this.applyScavBehaviorModifications();\r\n            }\r\n            \r\n            // Apply PMC behavior modifications\r\n            if (this.sainConfig.pmcBehavior) {\r\n                this.applyPMCBehaviorModifications();\r\n            }\r\n            \r\n            // Apply boss behavior modifications\r\n            if (this.sainConfig.bossBehavior) {\r\n                this.applyBossBehaviorModifications();\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] SAIN behavior modifications applied\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying SAIN behavior modifications: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply scav behavior modifications\r\n    private applyScavBehaviorModifications(): void {\r\n        try {\r\n            const scavBehavior = this.sainConfig.scavBehavior;\r\n            \r\n            if (scavBehavior.annoyingButNotDeadly) {\r\n                // Reduce scav accuracy and aggression\r\n                this.modifyScavBehavior(\"annoying_but_not_deadly\", {\r\n                    accuracy: scavBehavior.reducedAccuracy || 0.4,\r\n                    avoidHeadshots: scavBehavior.avoidHeadshots || true,\r\n                    preventStomachBlacking: scavBehavior.preventStomachBlacking || true\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying scav behavior modifications: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply PMC behavior modifications\r\n    private applyPMCBehaviorModifications(): void {\r\n        try {\r\n            const pmcBehavior = this.sainConfig.pmcBehavior;\r\n            \r\n            if (pmcBehavior.tacticalAndTough) {\r\n                // Apply tactical PMC behavior\r\n                this.modifyPMCBehavior(\"tactical_and_tough\", {\r\n                    accuracy: pmcBehavior.realisticAccuracy || 0.75,\r\n                    avoidInstaKills: pmcBehavior.avoidInstaKills || true,\r\n                    properGearUsage: pmcBehavior.properGearUsage || true\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying PMC behavior modifications: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply boss behavior modifications\r\n    private applyBossBehaviorModifications(): void {\r\n        try {\r\n            const bossBehavior = this.sainConfig.bossBehavior;\r\n            \r\n            if (bossBehavior.toughButNotInstaKill) {\r\n                // Apply balanced boss behavior\r\n                this.modifyBossBehavior(\"tough_but_not_insta_kill\", {\r\n                    avoidHeadshotSpam: bossBehavior.avoidHeadshotSpam || true,\r\n                    realisticDifficulty: bossBehavior.realisticDifficulty || true,\r\n                    properMechanics: bossBehavior.properMechanics || true\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying boss behavior modifications: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify scav behavior using SAIN\r\n    private modifyScavBehavior(behaviorType: string, modifications: any): void {\r\n        try {\r\n            if (!this.sainService || !this.sainService.modifyScavBehavior) return;\r\n            \r\n            // Apply modifications through SAIN service\r\n            this.sainService.modifyScavBehavior(behaviorType, modifications);\r\n            \r\n            this.logger.info(`[LiveTarkovAI] Applied ${behaviorType} scav behavior through SAIN`);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error modifying scav behavior through SAIN: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify PMC behavior using SAIN\r\n    private modifyPMCBehavior(behaviorType: string, modifications: any): void {\r\n        try {\r\n            if (!this.sainService || !this.sainService.modifyPMCBehavior) return;\r\n            \r\n            // Apply modifications through SAIN service\r\n            this.sainService.modifyPMCBehavior(behaviorType, modifications);\r\n            \r\n            this.logger.info(`[LiveTarkovAI] Applied ${behaviorType} PMC behavior through SAIN`);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error modifying PMC behavior through SAIN: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify boss behavior using SAIN\r\n    private modifyBossBehavior(behaviorType: string, modifications: any): void {\r\n        try {\r\n            if (!this.sainService || !this.sainService.modifyBossBehavior) return;\r\n            \r\n            // Apply modifications through SAIN service\r\n            this.sainService.modifyBossBehavior(behaviorType, modifications);\r\n            \r\n            this.logger.info(`[LiveTarkovAI] Applied ${behaviorType} boss behavior through SAIN`);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error modifying boss behavior through SAIN: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into SAIN services\r\n    private hookIntoSAINServices(): void {\r\n        try {\r\n            if (!this.sainService) return;\r\n            \r\n            // Hook into SAIN bot modification service if available\r\n            if (this.sainService.botModificationService) {\r\n                this.hookIntoSAINBotModification(this.sainService.botModificationService);\r\n            }\r\n            \r\n            // Hook into SAIN spawn service if available\r\n            if (this.sainService.spawnService) {\r\n                this.hookIntoSAINSpawnService(this.sainService.spawnService);\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Successfully hooked into SAIN services\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into SAIN services: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into SAIN bot modification service\r\n    private hookIntoSAINBotModification(sainBotModService: any): void {\r\n        try {\r\n            if (!sainBotModService || typeof sainBotModService !== \"object\") return;\r\n            \r\n            // Store reference to SAIN bot modification service\r\n            this.botModificationService = sainBotModService;\r\n            \r\n            // Hook into bot modification methods if they exist\r\n            if (sainBotModService.modifyBot && typeof sainBotModService.modifyBot === \"function\") {\r\n                const originalModifyBot = sainBotModService.modifyBot;\r\n                sainBotModService.modifyBot = (bot: any, modifications: any) => {\r\n                    // Apply our custom modifications before SAIN modifications\r\n                    this.applyCustomBotModifications(bot, modifications);\r\n                    \r\n                    // Call original SAIN modification method\r\n                    return originalModifyBot.call(sainBotModService, bot, modifications);\r\n                };\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Successfully hooked into SAIN bot modification service\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into SAIN bot modification service: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into SAIN spawn service\r\n    private hookIntoSAINSpawnService(sainSpawnService: any): void {\r\n        try {\r\n            if (!sainSpawnService || typeof sainSpawnService !== \"object\") return;\r\n            \r\n            // Hook into spawn methods if they exist\r\n            if (sainSpawnService.spawnBot && typeof sainSpawnService.spawnBot === \"function\") {\r\n                const originalSpawnBot = sainSpawnService.spawnBot;\r\n                sainSpawnService.spawnBot = async (botType: string, location: string, count: number) => {\r\n                    // Apply our custom spawn logic before SAIN spawning\r\n                    const modifiedCount = this.calculateCustomBotCount(botType, location, count);\r\n                    const modifiedBotType = this.getModifiedBotType(botType);\r\n                    \r\n                    // Call original SAIN spawn method with our modifications\r\n                    return await originalSpawnBot.call(sainSpawnService, modifiedBotType, location, modifiedCount);\r\n                };\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Successfully hooked into SAIN spawn service\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into SAIN spawn service: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply custom bot modifications\r\n    private applyCustomBotModifications(bot: any, modifications: any): void {\r\n        try {\r\n            // Apply our custom modifications based on configuration\r\n            const config = this.configManager.getConfig();\r\n            const botTypeConfig = config.botTypeSettings[bot.Role];\r\n            \r\n            if (botTypeConfig && botTypeConfig.enabled) {\r\n                // Apply gear restrictions\r\n                if (botTypeConfig.gearRestrictions) {\r\n                    this.applyGearRestrictions(bot, botTypeConfig.gearRestrictions);\r\n                }\r\n                \r\n                // Apply behavior modifications\r\n                if (botTypeConfig.liveTarkovBehavior) {\r\n                    this.applyBehaviorModifications(bot, botTypeConfig.liveTarkovBehavior);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying custom bot modifications: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear restrictions to bot\r\n    private applyGearRestrictions(bot: any, gearRestrictions: any): void {\r\n        try {\r\n            // Apply weapon restrictions\r\n            if (gearRestrictions.weapons && gearRestrictions.weapons.length > 0) {\r\n                bot.weaponRestrictions = gearRestrictions.weapons;\r\n            }\r\n            \r\n            // Apply armor restrictions\r\n            if (gearRestrictions.armor && gearRestrictions.armor.length > 0) {\r\n                bot.armorRestrictions = gearRestrictions.armor;\r\n            }\r\n            \r\n            // Apply item restrictions\r\n            if (gearRestrictions.items && gearRestrictions.items.length > 0) {\r\n                bot.itemRestrictions = gearRestrictions.items;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying gear restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply behavior modifications to bot\r\n    private applyBehaviorModifications(bot: any, behavior: any): void {\r\n        try {\r\n            // Apply accuracy modification\r\n            if (behavior.accuracy !== undefined) {\r\n                bot.accuracy = behavior.accuracy;\r\n            }\r\n            \r\n            // Apply reaction time modification\r\n            if (behavior.reactionTime !== undefined) {\r\n                bot.reactionTime = behavior.reactionTime;\r\n            }\r\n            \r\n            // Apply aggression modification\r\n            if (behavior.aggression !== undefined) {\r\n                bot.aggression = behavior.aggression;\r\n            }\r\n            \r\n            // Apply hearing modification\r\n            if (behavior.hearing !== undefined) {\r\n                bot.hearing = behavior.hearing;\r\n            }\r\n            \r\n            // Apply vision modification\r\n            if (behavior.vision !== undefined) {\r\n                bot.vision = behavior.vision;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying behavior modifications: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Calculate custom bot count based on configuration\r\n    private calculateCustomBotCount(botType: string, location: string, originalCount: number): number {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const mapConfig = config.mapSettings[location];\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) return originalCount;\r\n            \r\n            const botTypeConfig = mapConfig.botTypes[botType];\r\n            if (!botTypeConfig || !botTypeConfig.enabled) return 0;\r\n            \r\n            // Use configured max count or original count\r\n            return Math.min(botTypeConfig.maxCount, originalCount);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error calculating custom bot count: ${error}`);\r\n            return originalCount;\r\n        }\r\n    }\r\n\r\n    // Get modified bot type based on configuration\r\n    private getModifiedBotType(originalBotType: string): string {\r\n        try {\r\n            // For now, return original bot type\r\n            // This can be enhanced to modify bot types based on configuration\r\n            return originalBotType;\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error getting modified bot type: ${error}`);\r\n            return originalBotType;\r\n        }\r\n    }\r\n\r\n    // Check if SAIN integration is available\r\n    public isSAINAvailable(): boolean {\r\n        return this.sainAvailable;\r\n    }\r\n\r\n    // Get SAIN configuration\r\n    public getSAINConfig(): any {\r\n        return this.sainConfig;\r\n    }\r\n\r\n    // Update SAIN configuration\r\n    public updateSAINConfig(newConfig: any): void {\r\n        try {\r\n            this.sainConfig = { ...this.sainConfig, ...newConfig };\r\n            \r\n            if (this.sainConfig.enabled && this.sainAvailable) {\r\n                this.setupSAINIntegration();\r\n                this.logger.info(\"[LiveTarkovAI] SAIN configuration updated\");\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error updating SAIN configuration: ${error}`);\r\n        }\r\n    }\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
