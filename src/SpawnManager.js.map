{
  "version": 3,
  "sources": ["SpawnManager.ts"],
  "sourcesContent": ["import { DatabaseServer, Logger } from \"./types/spt-types\";\r\nimport { ConfigManager } from \"./ConfigManager\";\r\nimport {\r\n    BotHelper,\r\n    BotEquipmentModService,\r\n    BotModificationService,\r\n    BotSpawnService,\r\n    BotGenerationCacheService,\r\n    RandomUtil,\r\n    TimeUtil,\r\n    ItemHelper,\r\n    IBotType,\r\n    IBotBase,\r\n    BotDifficulty,\r\n    BotType\r\n} from \"./types/spt-types\";\r\n\r\nexport class SpawnManager {\r\n    private databaseServer: DatabaseServer;\r\n    private botHelper: BotHelper | null;\r\n    private botEquipmentModService: BotEquipmentModService | null;\r\n    private botModificationService: BotModificationService | null;\r\n    private botSpawnService: BotSpawnService | null;\r\n    private botGenerationCacheService: BotGenerationCacheService | null;\r\n    private randomUtil: RandomUtil | null;\r\n    private timeUtil: TimeUtil | null;\r\n    private itemHelper: ItemHelper | null;\r\n    private logger: Logger;\r\n    private configManager: ConfigManager;\r\n    private sainAvailable: boolean = false;\r\n\r\n    constructor(\r\n        databaseServer: DatabaseServer,\r\n        botHelper: BotHelper | null,\r\n        botEquipmentModService: BotEquipmentModService | null,\r\n        botModificationService: BotModificationService | null,\r\n        botSpawnService: BotSpawnService | null,\r\n        botGenerationCacheService: BotGenerationCacheService | null,\r\n        randomUtil: RandomUtil | null,\r\n        timeUtil: TimeUtil | null,\r\n        itemHelper: ItemHelper | null,\r\n        logger: Logger\r\n    ) {\r\n        this.databaseServer = databaseServer;\r\n        this.botHelper = botHelper;\r\n        this.botEquipmentModService = botEquipmentModService;\r\n        this.botModificationService = botModificationService;\r\n        this.botSpawnService = botSpawnService;\r\n        this.botGenerationCacheService = botGenerationCacheService;\r\n        this.randomUtil = randomUtil;\r\n        this.timeUtil = timeUtil;\r\n        this.itemHelper = itemHelper;\r\n        this.logger = logger;\r\n        this.configManager = new ConfigManager();\r\n    }\r\n\r\n    public initialize(): void {\r\n        try {\r\n            this.logger.info(\"[LiveTarkovAI] Initializing SpawnManager...\");\r\n            \r\n            // Check if SAIN is available for enhanced behavior\r\n            this.checkSAINAvailability();\r\n            \r\n            // Apply custom spawn configurations\r\n            this.applyCustomSpawnConfig();\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] SpawnManager initialized successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error initializing SpawnManager: ${error}`);\r\n        }\r\n    }\r\n\r\n    private checkSAINAvailability(): void {\r\n        try {\r\n            // Use the same robust SAIN detection as the main mod\r\n            const sainDetected = this.detectSAINMod();\r\n            \r\n            if (sainDetected) {\r\n                this.sainAvailable = true;\r\n                this.logger.info(\"[LiveTarkovAI] SAIN integration available - enhanced bot behavior enabled\");\r\n            } else {\r\n                this.sainAvailable = false;\r\n                this.logger.info(\"[LiveTarkovAI] SAIN not available - using standard bot behavior\");\r\n            }\r\n        } catch (error) {\r\n            this.sainAvailable = false;\r\n            this.logger.info(\"[LiveTarkovAI] SAIN not available - using standard bot behavior\");\r\n        }\r\n    }\r\n\r\n    // Detect SAIN mod using multiple methods\r\n    private detectSAINMod(): boolean {\r\n        try {\r\n            // Method 1: Try to require SAIN directly\r\n            try {\r\n                require(\"zSolarint-SAIN-ServerMod\");\r\n                return true;\r\n            } catch (error) {\r\n                // Continue to next method\r\n            }\r\n\r\n            // Method 2: Check for SAIN in global scope\r\n            if (globalThis.SAIN || globalThis.SainService || globalThis.sain) {\r\n                return true;\r\n            }\r\n\r\n            // Method 3: Check for SAIN in SPT container if available\r\n            try {\r\n                if (globalThis.SPT_CONTAINER) {\r\n                    const container = globalThis.SPT_CONTAINER;\r\n                    if (container.resolve && container.resolve(\"SAINService\")) {\r\n                        return true;\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                // Continue to next method\r\n            }\r\n\r\n            return false;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Apply custom spawn configurations to the database\r\n    public applyCustomSpawnConfig(): void {\r\n        try {\r\n            this.logger.info(\"[LiveTarkovAI] Applying custom spawn configurations...\");\r\n            \r\n            // Modify bot types in the database\r\n            this.modifyBotTypes();\r\n            \r\n            // Apply gear progression if enabled\r\n            if (this.configManager.isGearProgressionEnabled()) {\r\n                this.applyGearProgression();\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Custom spawn configurations applied successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying custom spawn config: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify bot types in the database\r\n    private modifyBotTypes(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const database = this.databaseServer.getTables();\r\n            let modifiedCount = 0;\r\n            const modifiedTypes: string[] = [];\r\n\r\n            for (const [botType, botConfig] of Object.entries(config.botTypeSettings || {})) {\r\n                if (!botConfig || !botConfig.enabled) {\r\n                    continue;\r\n                }\r\n\r\n                const dbBotType = database.bots.types[botType];\r\n                if (!dbBotType) {\r\n                    this.logger.warn(`[LiveTarkovAI] Bot type ${botType} not found in database`);\r\n                    continue;\r\n                }\r\n\r\n                // Apply gear tier restrictions\r\n                this.applyGearTierRestrictions(dbBotType, botConfig);\r\n                \r\n                // Apply difficulty settings\r\n                this.applyDifficultySettings(dbBotType, botConfig);\r\n\r\n                // Apply live Tarkov behavior\r\n                this.applyBotBehaviorSettings(dbBotType, botConfig);\r\n\r\n                modifiedCount++;\r\n                modifiedTypes.push(botType);\r\n            }\r\n\r\n            // Show summary instead of individual logs\r\n            if (modifiedCount > 0) {\r\n                this.logger.info(`[LiveTarkovAI] Modified ${modifiedCount} bot types: ${modifiedTypes.join(', ')}`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error modifying bot types: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear tier restrictions to bot types\r\n    private applyGearTierRestrictions(dbBotType: IBotType, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.gearRestrictions) return;\r\n            \r\n            // Apply weapon tier restrictions\r\n            if (botConfig.gearRestrictions.weapons && botConfig.gearRestrictions.weapons.length > 0) {\r\n                // Store weapon restrictions for later use during bot generation\r\n                if (!dbBotType.weaponRestrictions) {\r\n                    dbBotType.weaponRestrictions = [];\r\n                }\r\n                dbBotType.weaponRestrictions.push(...botConfig.gearRestrictions.weapons);\r\n            }\r\n            \r\n            // Apply armor tier restrictions  \r\n            if (botConfig.gearRestrictions.armor && botConfig.gearRestrictions.armor.length > 0) {\r\n                if (!dbBotType.armorRestrictions) {\r\n                    dbBotType.armorRestrictions = [];\r\n                }\r\n                dbBotType.armorRestrictions.push(...botConfig.gearRestrictions.armor);\r\n            }\r\n            \r\n            // Apply item restrictions\r\n            if (botConfig.gearRestrictions.items && botConfig.gearRestrictions.items.length > 0) {\r\n                if (!dbBotType.itemRestrictions) {\r\n                    dbBotType.itemRestrictions = [];\r\n                }\r\n                dbBotType.itemRestrictions.push(...botConfig.gearRestrictions.items);\r\n            }\r\n            \r\n            // Apply level-based gear scaling\r\n            if (botConfig.levelProgression && botConfig.levelProgression.gearScaling) {\r\n                dbBotType.levelBasedGear = true;\r\n                dbBotType.minLevel = botConfig.levelProgression.minLevel || 1;\r\n                dbBotType.maxLevel = botConfig.levelProgression.maxLevel || 60;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying gear restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply difficulty settings to bot types\r\n    private applyDifficultySettings(dbBotType: IBotType, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.difficulty) return;\r\n            \r\n            // Convert string difficulty to BotDifficulty enum\r\n            let difficulty: BotDifficulty;\r\n            switch (botConfig.difficulty) {\r\n                case \"easy\":\r\n                    difficulty = BotDifficulty.EASY;\r\n                    break;\r\n                case \"normal\":\r\n                    difficulty = BotDifficulty.NORMAL;\r\n                    break;\r\n                case \"hard\":\r\n                    difficulty = BotDifficulty.HARD;\r\n                    break;\r\n                case \"impossible\":\r\n                    difficulty = BotDifficulty.IMPOSSIBLE;\r\n                    break;\r\n                default:\r\n                    difficulty = BotDifficulty.NORMAL;\r\n            }\r\n            \r\n            // Apply difficulty to bot type\r\n            dbBotType.Difficulty = difficulty;\r\n            \r\n            // Apply difficulty-based behavior modifications\r\n            this.applyDifficultyBasedBehavior(dbBotType, difficulty);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying difficulty settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply difficulty-based behavior modifications\r\n    private applyDifficultyBasedBehavior(dbBotType: IBotType, difficulty: BotDifficulty): void {\r\n        try {\r\n            switch (difficulty) {\r\n                case BotDifficulty.EASY:\r\n                    // Reduce accuracy, reaction time, etc.\r\n                    if (!dbBotType.behaviorModifiers) {\r\n                        dbBotType.behaviorModifiers = {};\r\n                    }\r\n                    dbBotType.behaviorModifiers.accuracy = 0.3;\r\n                    dbBotType.behaviorModifiers.reactionTime = 2.0;\r\n                    dbBotType.behaviorModifiers.aggression = 0.4;\r\n                    break;\r\n                    \r\n                case BotDifficulty.NORMAL:\r\n                    // Default settings\r\n                    if (!dbBotType.behaviorModifiers) {\r\n                        dbBotType.behaviorModifiers = {};\r\n                    }\r\n                    dbBotType.behaviorModifiers.accuracy = 0.6;\r\n                    dbBotType.behaviorModifiers.reactionTime = 1.2;\r\n                    dbBotType.behaviorModifiers.aggression = 0.7;\r\n                    break;\r\n                    \r\n                case BotDifficulty.HARD:\r\n                    // Increase accuracy, reaction time, etc.\r\n                    if (!dbBotType.behaviorModifiers) {\r\n                        dbBotType.behaviorModifiers = {};\r\n                    }\r\n                    dbBotType.behaviorModifiers.accuracy = 0.8;\r\n                    dbBotType.behaviorModifiers.reactionTime = 0.8;\r\n                    dbBotType.behaviorModifiers.aggression = 0.9;\r\n                    break;\r\n                    \r\n                case BotDifficulty.IMPOSSIBLE:\r\n                    // Maximum difficulty settings\r\n                    if (!dbBotType.behaviorModifiers) {\r\n                        dbBotType.behaviorModifiers = {};\r\n                    }\r\n                    dbBotType.behaviorModifiers.accuracy = 0.95;\r\n                    dbBotType.behaviorModifiers.reactionTime = 0.3;\r\n                    dbBotType.behaviorModifiers.aggression = 1.0;\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying difficulty-based behavior: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply live Tarkov behavior settings\r\n    private applyBotBehaviorSettings(dbBotType: IBotType, botConfig: any): void {\r\n        try {\r\n            const behavior = botConfig.liveTarkovBehavior;\r\n            if (!behavior) return;\r\n            \r\n            // Apply live Tarkov behavior settings to bot type\r\n            if (!dbBotType.liveTarkovBehavior) {\r\n                dbBotType.liveTarkovBehavior = {};\r\n            }\r\n            \r\n            // Apply accuracy\r\n            if (behavior.accuracy !== undefined) {\r\n                dbBotType.liveTarkovBehavior.accuracy = behavior.accuracy;\r\n            }\r\n            \r\n            // Apply reaction time\r\n            if (behavior.reactionTime !== undefined) {\r\n                dbBotType.liveTarkovBehavior.reactionTime = behavior.reactionTime;\r\n            }\r\n            \r\n            // Apply aggression\r\n            if (behavior.aggression !== undefined) {\r\n                dbBotType.liveTarkovBehavior.aggression = behavior.aggression;\r\n            }\r\n            \r\n            // Apply hearing\r\n            if (behavior.hearing !== undefined) {\r\n                dbBotType.liveTarkovBehavior.hearing = behavior.hearing;\r\n            }\r\n            \r\n            // Apply vision\r\n            if (behavior.vision !== undefined) {\r\n                dbBotType.liveTarkovBehavior.vision = behavior.vision;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying bot behavior settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear progression system\r\n    private applyGearProgression(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.enabled) return;\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Applying gear progression system...\");\r\n            \r\n            // Apply level-based gear scaling to PMCs\r\n            this.applyPMCGearProgression(gearProgression);\r\n            \r\n            // Apply meta ammo enforcement\r\n            if (gearProgression.enforceMetaAmmo) {\r\n                this.applyMetaAmmoEnforcement(gearProgression);\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Gear progression system applied successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying gear progression: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply PMC gear progression based on level\r\n    private applyPMCGearProgression(gearProgression: any): void {\r\n        try {\r\n            const database = this.databaseServer.getTables();\r\n            const pmcTypes = [\"pmcbear\", \"pmcusec\"];\r\n            \r\n            for (const pmcType of pmcTypes) {\r\n                const dbBotType = database.bots.types[pmcType];\r\n                if (!dbBotType) continue;\r\n                \r\n                // Set level-based gear scaling\r\n                dbBotType.levelBasedGear = true;\r\n                dbBotType.minLevel = 1;\r\n                dbBotType.maxLevel = 60;\r\n                \r\n                // Set high-tier threshold\r\n                if (gearProgression.minLevelForHighTier) {\r\n                    dbBotType.highTierThreshold = gearProgression.minLevelForHighTier;\r\n                }\r\n                \r\n                // Store gear progression data\r\n                if (!dbBotType.gearProgression) {\r\n                    dbBotType.gearProgression = {};\r\n                }\r\n                dbBotType.gearProgression.metaAmmoTypes = gearProgression.metaAmmoTypes || [];\r\n                dbBotType.gearProgression.highTierArmor = gearProgression.highTierArmor || [];\r\n                dbBotType.gearProgression.metaWeapons = gearProgression.metaWeapons || [];\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying PMC gear progression: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply meta ammo enforcement\r\n    private applyMetaAmmoEnforcement(gearProgression: any): void {\r\n        try {\r\n            const database = this.databaseServer.getTables();\r\n            const pmcTypes = [\"pmcbear\", \"pmcusec\"];\r\n            \r\n            for (const pmcType of pmcTypes) {\r\n                const dbBotType = database.bots.types[pmcType];\r\n                if (!dbBotType) continue;\r\n                \r\n                // Store meta ammo types for enforcement\r\n                if (!dbBotType.metaAmmoTypes) {\r\n                    dbBotType.metaAmmoTypes = [];\r\n                }\r\n                dbBotType.metaAmmoTypes.push(...(gearProgression.metaAmmoTypes || []));\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error applying meta ammo enforcement: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into SPT spawn service\r\n    public hookIntoSpawnService(spawnService: any): void {\r\n        try {\r\n            if (!spawnService || typeof spawnService !== \"object\") return;\r\n            \r\n            // Store reference to spawn service\r\n            this.botSpawnService = spawnService;\r\n            \r\n            // Hook into spawn methods if they exist\r\n            if (spawnService.spawnBot && typeof spawnService.spawnBot === \"function\") {\r\n                const originalSpawnBot = spawnService.spawnBot;\r\n                spawnService.spawnBot = async (botType: string, location: string, count: number) => {\r\n                    // Apply our custom spawn logic before spawning\r\n                    const modifiedCount = this.calculateCustomBotCount(botType, location, count);\r\n                    const modifiedBotType = this.getModifiedBotType(botType);\r\n                    \r\n                    // Call original spawn method with our modifications\r\n                    return await originalSpawnBot.call(spawnService, modifiedBotType, location, modifiedCount);\r\n                };\r\n            }\r\n            \r\n            this.logger.info(\"[LiveTarkovAI] Successfully hooked into spawn service\");\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error hooking into spawn service: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Calculate custom bot count based on configuration\r\n    private calculateCustomBotCount(botType: string, location: string, originalCount: number): number {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const mapConfig = config.mapSettings[location];\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) return originalCount;\r\n            \r\n            const botTypeConfig = mapConfig.botTypes[botType];\r\n            if (!botTypeConfig || !botTypeConfig.enabled) return 0;\r\n            \r\n            // Use configured max count or original count\r\n            return Math.min(botTypeConfig.maxCount, originalCount);\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error calculating custom bot count: ${error}`);\r\n            return originalCount;\r\n        }\r\n    }\r\n\r\n    // Get modified bot type based on configuration\r\n    private getModifiedBotType(originalBotType: string): string {\r\n        try {\r\n            // For now, return original bot type\r\n            // This can be enhanced to modify bot types based on configuration\r\n            return originalBotType;\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error getting modified bot type: ${error}`);\r\n            return originalBotType;\r\n        }\r\n    }\r\n\r\n    // Get spawn statistics\r\n    public getSpawnStatistics(): any {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const stats = {\r\n                totalBots: 0,\r\n                botTypes: {},\r\n                maps: {},\r\n                dependencies: {\r\n                    waypoints: true, // Always true since it's required\r\n                    bigBrain: true,  // Always true since it's required\r\n                    sain: this.sainAvailable,\r\n                    fika: false // Would need to check this separately\r\n                }\r\n            };\r\n\r\n            // Calculate statistics based on configuration\r\n            for (const [mapName, mapConfig] of Object.entries(config.mapSettings || {})) {\r\n                if (mapConfig && mapConfig.enabled) {\r\n                    stats.maps[mapName] = {\r\n                        totalBots: mapConfig.maxBots || 0,\r\n                        botTypes: mapConfig.botTypes || {},\r\n                        liveTarkovSettings: mapConfig.liveTarkovSettings || {}\r\n                    };\r\n                    stats.totalBots += mapConfig.maxBots || 0;\r\n                }\r\n            }\r\n\r\n            for (const [botType, botConfig] of Object.entries(config.botTypeSettings || {})) {\r\n                if (botConfig && botConfig.enabled) {\r\n                    stats.botTypes[botType] = {\r\n                        gearTier: botConfig.gearTier,\r\n                        difficulty: botConfig.difficulty,\r\n                        spawnChance: botConfig.spawnChance,\r\n                        liveTarkovBehavior: botConfig.liveTarkovBehavior || {}\r\n                    };\r\n                }\r\n            }\r\n\r\n            return stats;\r\n        } catch (error) {\r\n            this.logger.error(`[LiveTarkovAI] Error getting spawn statistics: ${error}`);\r\n            return {};\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["import_spt_types"]
}
