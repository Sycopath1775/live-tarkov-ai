{
  "version": 3,
  "sources": ["SpawnManager.ts"],
  "sourcesContent": ["import { DatabaseServer, Logger, DependencyContainer } from \"./types/spt-types\";\r\nimport { ConfigManager } from \"./ConfigManager\";\r\n\r\nexport class SpawnManager {\r\n    private databaseServer: DatabaseServer;\r\n    private configManager: ConfigManager;\r\n    private logger: Logger;\r\n    private container: DependencyContainer;\r\n    \r\n    // SPT Router Service for REAL spawn control\r\n    private staticRouterService: any;\r\n\r\n    constructor(databaseServer: DatabaseServer, configManager: ConfigManager, logger: Logger, container: DependencyContainer) {\r\n        this.databaseServer = databaseServer;\r\n        this.configManager = configManager;\r\n        this.logger = logger;\r\n        this.container = container;\r\n    }\r\n\r\n    public initialize(): void {\r\n        try {\r\n            this.logger.info(\"Initializing REAL SPT router-based spawn control system...\");\r\n            \r\n            // Resolve SPT router service for REAL control\r\n            this.resolveRouterService();\r\n            \r\n            // Apply custom spawn configurations to database\r\n            this.applyCustomSpawnConfig();\r\n            \r\n            // Register router hooks for REAL spawn control\r\n            this.registerSpawnRouterHooks();\r\n            \r\n            this.logger.info(\"REAL SPT router-based spawn control system initialized successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`Error initializing spawn system: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Resolve SPT router service for REAL control\r\n    private resolveRouterService(): void {\r\n        try {\r\n            this.staticRouterService = this.container.resolve(\"StaticRouterModService\");\r\n            \r\n            if (this.staticRouterService) {\r\n                this.logger.info(\"\u2713 StaticRouterModService available - REAL spawn control enabled\");\r\n            } else {\r\n                this.logger.error(\"\u274C StaticRouterModService not available - spawn control disabled\");\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error resolving router service: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Register router hooks for REAL spawn control\r\n    private registerSpawnRouterHooks(): void {\r\n        try {\r\n            if (!this.staticRouterService) {\r\n                this.logger.warn(\"Router service not available - cannot register spawn hooks\");\r\n                return;\r\n            }\r\n\r\n            // Register bot generation router hook\r\n            this.registerBotGenerationRouter();\r\n            \r\n            // Register raid start router hook\r\n            this.registerRaidStartRouter();\r\n            \r\n            // Register game start router hook\r\n            this.registerGameStartRouter();\r\n            \r\n            this.logger.info(\"All spawn router hooks registered successfully\");\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error registering router hooks: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Register router hook for bot generation - REAL spawn control\r\n    private registerBotGenerationRouter(): void {\r\n        try {\r\n            this.staticRouterService.registerStaticRouter(\r\n                \"LiveTarkovAI-BotGenerationRouter\",\r\n                [\r\n                    {\r\n                        url: \"/client/game/bot/generate\",\r\n                        action: async (url: string, info: any, sessionId: string, output: string) => {\r\n                            try {\r\n                                // Parse the bot generation output\r\n                                const outputJSON = JSON.parse(output);\r\n                                \r\n                                // Apply Live Tarkov bot spawn rules\r\n                                const modifiedOutput = this.applyBotSpawnRules(outputJSON, info);\r\n                                \r\n                                this.logger.info(`Applied bot spawn rules for ${info.location || 'unknown location'}`);\r\n                                \r\n                                return JSON.stringify(modifiedOutput);\r\n                            } catch (error) {\r\n                                this.logger.error(`Error in bot generation router: ${error}`);\r\n                                return output; // Fallback to original\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                \"LiveTarkovAI\"\r\n            );\r\n            \r\n            this.logger.info(\"Bot generation router hook registered\");\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error registering bot generation router: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Register router hook for raid start - REAL spawn control\r\n    private registerRaidStartRouter(): void {\r\n        try {\r\n            this.staticRouterService.registerStaticRouter(\r\n                \"LiveTarkovAI-RaidStartRouter\",\r\n                [\r\n                    {\r\n                        url: \"/client/match/local/start\",\r\n                        action: async (url: string, info: any, sessionId: string, output: string) => {\r\n                            try {\r\n                                // Parse the raid start output\r\n                                const outputJSON = JSON.parse(output);\r\n                                \r\n                                // Apply Live Tarkov raid spawn rules\r\n                                const modifiedOutput = this.applyRaidSpawnRules(outputJSON, info);\r\n                                \r\n                                this.logger.info(`Applied raid spawn rules for ${info.location || 'unknown location'}`);\r\n                                \r\n                                return JSON.stringify(modifiedOutput);\r\n                            } catch (error) {\r\n                                this.logger.error(`Error in raid start router: ${error}`);\r\n                                return output; // Fallback to original\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                \"LiveTarkovAI\"\r\n            );\r\n            \r\n            this.logger.info(\"Raid start router hook registered\");\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error registering raid start router: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Register router hook for game start - REAL spawn control\r\n    private registerGameStartRouter(): void {\r\n        try {\r\n            this.staticRouterService.registerStaticRouter(\r\n                \"LiveTarkovAI-GameStartRouter\",\r\n                [\r\n                    {\r\n                        url: \"/client/game/start\",\r\n                        action: async (url: string, info: any, sessionId: string, output: string) => {\r\n                            try {\r\n                                // Parse the game start output\r\n                                const outputJSON = JSON.parse(output);\r\n                                \r\n                                // Apply Live Tarkov game spawn rules\r\n                                const modifiedOutput = this.applyGameSpawnRules(outputJSON, info);\r\n                                \r\n                                this.logger.info(\"Applied game spawn rules\");\r\n                                \r\n                                return JSON.stringify(modifiedOutput);\r\n                            } catch (error) {\r\n                                this.logger.error(`Error in game start router: ${error}`);\r\n                                return output; // Fallback to original\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                \"LiveTarkovAI\"\r\n            );\r\n            \r\n            this.logger.info(\"Game start router hook registered\");\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error registering game start router: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply Live Tarkov bot spawn rules - REAL spawn control\r\n    private applyBotSpawnRules(outputJSON: any, info: any): any {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const location = info.location?.toLowerCase();\r\n            const mapConfig = config.mapSettings?.[location];\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) {\r\n                return outputJSON; // No config for this map\r\n            }\r\n            \r\n            const modifiedOutput = { ...outputJSON };\r\n            \r\n            // Apply bot count limits\r\n            if (mapConfig.maxBots && mapConfig.maxBots > 0) {\r\n                if (modifiedOutput.data && Array.isArray(modifiedOutput.data)) {\r\n                    // Limit the number of bots generated\r\n                    modifiedOutput.data = modifiedOutput.data.slice(0, mapConfig.maxBots);\r\n                }\r\n            }\r\n            \r\n            // Apply bot type restrictions\r\n            if (mapConfig.botTypes) {\r\n                const allowedTypes = Object.entries(mapConfig.botTypes)\r\n                    .filter(([_, config]: [string, any]) => config.enabled)\r\n                    .map(([type, _]: [string, any]) => type);\r\n                \r\n                if (allowedTypes.length > 0 && modifiedOutput.data && Array.isArray(modifiedOutput.data)) {\r\n                    // Filter bots to only allowed types\r\n                    modifiedOutput.data = modifiedOutput.data.filter((bot: any) => {\r\n                        const botType = bot.Role || bot.BotType;\r\n                        return allowedTypes.includes(botType);\r\n                    });\r\n                }\r\n            }\r\n            \r\n            return modifiedOutput;\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error applying bot spawn rules: ${error}`);\r\n            return outputJSON;\r\n        }\r\n    }\r\n\r\n    // Apply Live Tarkov raid spawn rules - REAL spawn control\r\n    private applyRaidSpawnRules(outputJSON: any, info: any): any {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const location = info.location?.toLowerCase();\r\n            const mapConfig = config.mapSettings?.[location];\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) {\r\n                return outputJSON; // No config for this map\r\n            }\r\n            \r\n            const modifiedOutput = { ...outputJSON };\r\n            \r\n            // Apply global bot limits\r\n            const globalSettings = config.globalSettings;\r\n            if (globalSettings) {\r\n                const maxBots = globalSettings.maxBotsPerRaid || 15;\r\n                const minBots = globalSettings.minBotsPerRaid || 6;\r\n                \r\n                // Modify raid configuration\r\n                if (modifiedOutput.data) {\r\n                    modifiedOutput.data.maxBots = maxBots;\r\n                    modifiedOutput.data.minBots = minBots;\r\n                }\r\n            }\r\n            \r\n            // Apply map-specific spawn settings\r\n            const liveTarkovSettings = mapConfig.liveTarkovSettings;\r\n            if (liveTarkovSettings) {\r\n                // Apply raid start bot count\r\n                if (liveTarkovSettings.raidStartBots && liveTarkovSettings.raidStartBots > 0) {\r\n                    if (modifiedOutput.data) {\r\n                        modifiedOutput.data.raidStartBots = liveTarkovSettings.raidStartBots;\r\n                    }\r\n                }\r\n                \r\n                // Apply wave settings\r\n                if (liveTarkovSettings.waveBots && liveTarkovSettings.maxWaves) {\r\n                    if (modifiedOutput.data) {\r\n                        modifiedOutput.data.waveBots = liveTarkovSettings.waveBots;\r\n                        modifiedOutput.data.maxWaves = liveTarkovSettings.maxWaves;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return modifiedOutput;\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error applying raid spawn rules: ${error}`);\r\n            return outputJSON;\r\n        }\r\n    }\r\n\r\n    // Apply Live Tarkov game spawn rules - REAL spawn control\r\n    private applyGameSpawnRules(outputJSON: any, info: any): any {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const modifiedOutput = { ...outputJSON };\r\n            \r\n            // Apply global spawn settings\r\n            const globalSettings = config.globalSettings;\r\n            if (globalSettings) {\r\n                // Apply global spawn limits\r\n                if (modifiedOutput.data) {\r\n                    modifiedOutput.data.maxBots = globalSettings.maxBotsPerRaid || 15;\r\n                    modifiedOutput.data.minBots = globalSettings.minBotsPerRaid || 6;\r\n                }\r\n            }\r\n            \r\n            return modifiedOutput;\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error applying game spawn rules: ${error}`);\r\n            return outputJSON;\r\n        }\r\n    }\r\n\r\n    // Apply custom spawn configurations to database\r\n    public applyCustomSpawnConfig(): void {\r\n        try {\r\n            // Modify bot types in the database\r\n            this.modifyBotTypes();\r\n            \r\n            // Apply gear progression if enabled\r\n            if (this.configManager.isGearProgressionEnabled()) {\r\n                this.applyGearProgression();\r\n            }\r\n            \r\n            this.logger.info(\"Live Tarkov spawn configuration completed\");\r\n        } catch (error) {\r\n            this.logger.error(`Error applying custom spawn config: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify bot types in the database\r\n    private modifyBotTypes(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const database = this.databaseServer.getTables();\r\n            let modifiedCount = 0;\r\n\r\n            for (const [botType, botConfig] of Object.entries(config.botTypeSettings || {})) {\r\n                if (!botConfig || !botConfig.enabled) {\r\n                    continue;\r\n                }\r\n\r\n                const dbBotType = database.bots.types[botType];\r\n                if (!dbBotType) {\r\n                    continue; // Don't spam warnings for missing bot types\r\n                }\r\n\r\n                // Apply gear tier restrictions\r\n                this.applyGearTierRestrictions(dbBotType, botConfig);\r\n                \r\n                // Apply difficulty settings\r\n                this.applyDifficultySettings(dbBotType, botConfig);\r\n\r\n                // Apply live Tarkov behavior\r\n                this.applyBotBehaviorSettings(dbBotType, botConfig);\r\n\r\n                modifiedCount++;\r\n            }\r\n\r\n            // Show simple summary\r\n            if (modifiedCount > 0) {\r\n                this.logger.info(`Modified ${modifiedCount} bot types`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error modifying bot types: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear tier restrictions to bot types\r\n    private applyGearTierRestrictions(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.gearRestrictions) return;\r\n\r\n            const restrictions = botConfig.gearRestrictions;\r\n            \r\n            // Apply weapon restrictions\r\n            if (restrictions.weapons) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.equipment = dbBotType.inventory.equipment || {};\r\n                dbBotType.inventory.equipment.weapon = restrictions.weapons;\r\n            }\r\n\r\n            // Apply armor restrictions\r\n            if (restrictions.armor) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.equipment = dbBotType.inventory.equipment || {};\r\n                dbBotType.inventory.equipment.armor = restrictions.armor;\r\n            }\r\n\r\n            // Apply item restrictions\r\n            if (restrictions.items) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.items = restrictions.items;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying gear restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply difficulty settings to bot types\r\n    private applyDifficultySettings(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.difficulty) return;\r\n\r\n            const difficulty = botConfig.difficulty;\r\n            \r\n            // Set bot difficulty\r\n            dbBotType.difficulty = difficulty;\r\n            \r\n            // Apply difficulty-based behavior\r\n            this.applyDifficultyBasedBehavior(dbBotType, difficulty);\r\n        } catch (error) {\r\n            this.logger.error(`Error applying difficulty settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply difficulty-based behavior modifications\r\n    private applyDifficultyBasedBehavior(dbBotType: any, difficulty: string): void {\r\n        try {\r\n            // Modify bot behavior based on difficulty\r\n            switch (difficulty) {\r\n                case \"easy\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.max(0.1, (dbBotType.skills.aiming || 0.5) * 0.7);\r\n                    dbBotType.skills.recoil = Math.max(0.1, (dbBotType.skills.recoil || 0.5) * 0.7);\r\n                    break;\r\n                case \"normal\":\r\n                    // Keep default values\r\n                    break;\r\n                case \"hard\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.min(1.0, (dbBotType.skills.aiming || 0.5) * 1.3);\r\n                    dbBotType.skills.recoil = Math.min(1.0, (dbBotType.skills.recoil || 0.5) * 1.3);\r\n                    break;\r\n                case \"impossible\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.min(1.0, (dbBotType.skills.aiming || 0.5) * 1.5);\r\n                    dbBotType.skills.recoil = Math.min(1.0, (dbBotType.skills.recoil || 0.5) * 1.5);\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying difficulty-based behavior: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply live Tarkov behavior settings\r\n    private applyBotBehaviorSettings(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.liveTarkovBehavior) return;\r\n\r\n            const behavior = botConfig.liveTarkovBehavior;\r\n            \r\n            // Apply behavior modifications\r\n            if (behavior.aggressive) {\r\n                dbBotType.aggression = Math.min(1.0, (dbBotType.aggression || 0.5) * 1.2);\r\n            }\r\n            \r\n            if (behavior.cautious) {\r\n                dbBotType.aggression = Math.max(0.1, (dbBotType.aggression || 0.5) * 0.8);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying bot behavior settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear progression system\r\n    private applyGearProgression(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.enabled) return;\r\n            \r\n            this.logger.info(\"Applying gear progression system...\");\r\n            \r\n            // Apply level-based gear scaling to PMCs\r\n            this.applyPMCGearProgression();\r\n            \r\n            // Apply meta ammo enforcement\r\n            this.applyMetaAmmoEnforcement();\r\n            \r\n            this.logger.info(\"Gear progression system applied successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`Error applying gear progression: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply PMC gear progression based on level\r\n    private applyPMCGearProgression(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.progressionTiers) return;\r\n            \r\n            const progression = gearProgression.progressionTiers;\r\n            \r\n            // Apply level-based gear scaling\r\n            for (const [level, gearConfig] of Object.entries(progression)) {\r\n                const minLevel = parseInt(level);\r\n                if (isNaN(minLevel)) continue;\r\n                \r\n                // This would be applied when PMCs are spawned based on their level\r\n                // For now, we just store the configuration\r\n                this.logger.info(`Configured gear progression for level ${minLevel}+`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying PMC gear progression: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply meta ammo enforcement\r\n    private applyMetaAmmoEnforcement(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.metaAmmoTypes) return;\r\n            \r\n            const metaAmmoTypes = gearProgression.metaAmmoTypes;\r\n            \r\n            if (metaAmmoTypes.length > 0) {\r\n                this.logger.info(`Meta ammo enforcement enabled with ${metaAmmoTypes.length} ammo types`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying meta ammo enforcement: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Get spawn statistics for monitoring\r\n    public getSpawnStatistics(): any {\r\n        try {\r\n            const stats = {\r\n                totalBots: 0,\r\n                modifiedBots: 0,\r\n                gearProgressionEnabled: this.configManager.isGearProgressionEnabled(),\r\n                spawnControlEnabled: !!this.staticRouterService,\r\n                locationControlEnabled: false // No direct location controller exposed here\r\n            };\r\n            \r\n            return stats;\r\n        } catch (error) {\r\n            this.logger.error(`Error getting spawn statistics: ${error}`);\r\n            return {};\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["config"]
}
