{
  "version": 3,
  "sources": ["SpawnManager.ts"],
  "sourcesContent": ["import { DatabaseServer, Logger, DependencyContainer, ILocationBase, IRaidChanges } from \"./types/spt-types\";\r\nimport { ConfigManager } from \"./ConfigManager\";\r\n\r\nexport class SpawnManager {\r\n    private databaseServer: DatabaseServer;\r\n    private configManager: ConfigManager;\r\n    private logger: Logger;\r\n    private container: DependencyContainer;\r\n    \r\n    // SPT Services for REAL spawn control\r\n    private botSpawnService: any;\r\n    private locationController: any;\r\n    private botHelper: any;\r\n    private botController: any;\r\n\r\n    constructor(databaseServer: DatabaseServer, configManager: ConfigManager, logger: Logger, container: DependencyContainer) {\r\n        this.databaseServer = databaseServer;\r\n        this.configManager = configManager;\r\n        this.logger = logger;\r\n        this.container = container;\r\n    }\r\n\r\n    public initialize(): void {\r\n        try {\r\n            this.logger.info(\"Initializing REAL spawn control system...\");\r\n            \r\n            // Resolve SPT spawn services\r\n            this.resolveSpawnServices();\r\n            \r\n            // Apply custom spawn configurations\r\n            this.applyCustomSpawnConfig();\r\n            \r\n            // Hook into SPT's spawn system for REAL control\r\n            this.hookIntoSpawnSystem();\r\n            \r\n            this.logger.info(\"REAL spawn control system initialized successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`Error initializing spawn system: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Resolve SPT spawn services for REAL control\r\n    private resolveSpawnServices(): void {\r\n        try {\r\n            // Try to resolve SPT spawn services\r\n            this.botSpawnService = this.container.resolve(\"BotSpawnService\");\r\n            this.locationController = this.container.resolve(\"LocationController\");\r\n            this.botHelper = this.container.resolve(\"BotHelper\");\r\n            this.botController = this.container.resolve(\"BotController\");\r\n            \r\n            if (this.botSpawnService) {\r\n                this.logger.info(\"\u2713 BotSpawnService available - REAL spawn control enabled\");\r\n            }\r\n            \r\n            if (this.locationController) {\r\n                this.logger.info(\"\u2713 LocationController available - Map spawn control enabled\");\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.logger.warn(\"Some SPT spawn services not available - limited functionality\");\r\n        }\r\n    }\r\n\r\n    // Apply custom spawn configurations to the database\r\n    public applyCustomSpawnConfig(): void {\r\n        try {\r\n            // Modify bot types in the database\r\n            this.modifyBotTypes();\r\n            \r\n            // Apply gear progression if enabled\r\n            if (this.configManager.isGearProgressionEnabled()) {\r\n                this.applyGearProgression();\r\n            }\r\n            \r\n            this.logger.info(\"Live Tarkov spawn configuration completed\");\r\n        } catch (error) {\r\n            this.logger.error(`Error applying custom spawn config: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into SPT's spawn system for REAL control\r\n    private hookIntoSpawnSystem(): void {\r\n        try {\r\n            if (!this.botSpawnService) {\r\n                this.logger.warn(\"BotSpawnService not available - cannot hook into spawn system\");\r\n                return;\r\n            }\r\n\r\n            // Hook into bot spawn events\r\n            this.hookIntoBotSpawning();\r\n            \r\n            // Hook into location spawn events\r\n            this.hookIntoLocationSpawning();\r\n            \r\n            // Apply spawn rate overrides\r\n            this.applySpawnRateOverrides();\r\n            \r\n            this.logger.info(\"Successfully hooked into SPT spawn system\");\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error hooking into spawn system: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into bot spawning events for REAL control\r\n    private hookIntoBotSpawning(): void {\r\n        try {\r\n            if (!this.botSpawnService || !this.botSpawnService.onBotSpawned) {\r\n                return;\r\n            }\r\n\r\n            // Hook into bot spawned event\r\n            this.botSpawnService.onBotSpawned = (bot: any, location: string) => {\r\n                this.onBotSpawned(bot, location);\r\n            };\r\n\r\n            // Hook into bot spawn request event\r\n            if (this.botSpawnService.onSpawnRequest) {\r\n                this.botSpawnService.onSpawnRequest = (request: any) => {\r\n                    return this.onSpawnRequest(request);\r\n                };\r\n            }\r\n\r\n            this.logger.info(\"Bot spawning hooks installed\");\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error hooking into bot spawning: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Hook into location spawning events\r\n    private hookIntoLocationSpawning(): void {\r\n        try {\r\n            if (!this.locationController || !this.locationController.onLocationSpawn) {\r\n                return;\r\n            }\r\n\r\n            // Hook into location spawn event\r\n            this.locationController.onLocationSpawn = (location: string, raidChanges: IRaidChanges) => {\r\n                this.onLocationSpawn(location, raidChanges);\r\n            };\r\n\r\n            this.logger.info(\"Location spawning hooks installed\");\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error hooking into location spawning: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply spawn rate overrides to SPT\r\n    private applySpawnRateOverrides(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const globalSettings = config.globalSettings;\r\n            \r\n            if (!globalSettings) return;\r\n            \r\n            // Override global bot limits in SPT\r\n            const maxBots = globalSettings.maxBotsPerRaid || 15;\r\n            const minBots = globalSettings.minBotsPerRaid || 6;\r\n            \r\n            // Apply to SPT's spawn configuration\r\n            if (this.botSpawnService && this.botSpawnService.setMaxBots) {\r\n                this.botSpawnService.setMaxBots(maxBots);\r\n                this.botSpawnService.setMinBots(minBots);\r\n                this.logger.info(`Applied spawn limits: ${minBots}-${maxBots} bots per raid`);\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error applying spawn rate overrides: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Handle bot spawned event - REAL spawn control\r\n    private onBotSpawned(bot: any, location: string): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const mapConfig = config.mapSettings?.[location];\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) return;\r\n            \r\n            // Apply map-specific spawn rules\r\n            this.applyMapSpawnRules(bot, location, mapConfig);\r\n            \r\n            // Apply boss exclusion zones\r\n            this.applyBossExclusionZones(bot, location, mapConfig);\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error handling bot spawned event: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Handle spawn request event - REAL spawn control\r\n    private onSpawnRequest(request: any): any {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const location = request.location;\r\n            const mapConfig = config.mapSettings?.[location];\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) {\r\n                return request; // Allow default spawning\r\n            }\r\n            \r\n            // Modify spawn request based on Live Tarkov rules\r\n            const modifiedRequest = this.modifySpawnRequest(request, mapConfig);\r\n            \r\n            return modifiedRequest;\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error handling spawn request: ${error}`);\r\n            return request; // Fallback to original request\r\n        }\r\n    }\r\n\r\n    // Handle location spawn event - REAL spawn control\r\n    private onLocationSpawn(location: string, raidChanges: IRaidChanges): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const mapConfig = config.mapSettings?.[location];\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) return;\r\n            \r\n            // Apply map-specific raid changes\r\n            this.applyMapRaidChanges(location, raidChanges, mapConfig);\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error handling location spawn: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply map-specific spawn rules to spawned bots\r\n    private applyMapSpawnRules(bot: any, location: string, mapConfig: any): void {\r\n        try {\r\n            const botTypes = mapConfig.botTypes;\r\n            if (!botTypes) return;\r\n            \r\n            const botType = bot.Role || bot.BotType;\r\n            const botConfig = botTypes[botType];\r\n            \r\n            if (!botConfig || !botConfig.enabled) return;\r\n            \r\n            // Apply difficulty overrides\r\n            if (botConfig.difficulty) {\r\n                bot.Difficulty = botConfig.difficulty;\r\n            }\r\n            \r\n            // Apply gear restrictions\r\n            if (botConfig.gearRestrictions) {\r\n                this.applyGearRestrictionsToBot(bot, botConfig.gearRestrictions);\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error applying map spawn rules: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply boss exclusion zones - REAL spawn control\r\n    private applyBossExclusionZones(bot: any, location: string, mapConfig: any): void {\r\n        try {\r\n            const bossExclusionZones = mapConfig.bossExclusionZones;\r\n            if (!bossExclusionZones) return;\r\n            \r\n            // Check if this bot is in a boss exclusion zone\r\n            for (const zone of bossExclusionZones) {\r\n                if (this.isBotInZone(bot, zone)) {\r\n                    // Prevent regular scavs from spawning in boss zones\r\n                    if (bot.Role === \"assault\" && zone.excludeRegularScavs) {\r\n                        this.logger.info(`Prevented regular scav spawn in boss zone: ${zone.name}`);\r\n                        // Remove the bot from the raid\r\n                        this.removeBotFromRaid(bot);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error applying boss exclusion zones: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify spawn request based on Live Tarkov rules\r\n    private modifySpawnRequest(request: any, mapConfig: any): any {\r\n        try {\r\n            const modifiedRequest = { ...request };\r\n            \r\n            // Apply bot count limits\r\n            if (mapConfig.maxBots && mapConfig.maxBots > 0) {\r\n                modifiedRequest.maxBots = Math.min(request.maxBots || 20, mapConfig.maxBots);\r\n            }\r\n            \r\n            if (mapConfig.minBots && mapConfig.minBots > 0) {\r\n                modifiedRequest.minBots = Math.max(request.minBots || 5, mapConfig.minBots);\r\n            }\r\n            \r\n            // Apply bot type restrictions\r\n            if (mapConfig.botTypes) {\r\n                const allowedTypes = Object.entries(mapConfig.botTypes)\r\n                    .filter(([_, config]: [string, any]) => config.enabled)\r\n                    .map(([type, _]: [string, any]) => type);\r\n                \r\n                if (allowedTypes.length > 0) {\r\n                    modifiedRequest.allowedBotTypes = allowedTypes;\r\n                }\r\n            }\r\n            \r\n            return modifiedRequest;\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error modifying spawn request: ${error}`);\r\n            return request;\r\n        }\r\n    }\r\n\r\n    // Apply map-specific raid changes\r\n    private applyMapRaidChanges(location: string, raidChanges: IRaidChanges, mapConfig: any): void {\r\n        try {\r\n            const liveTarkovSettings = mapConfig.liveTarkovSettings;\r\n            if (!liveTarkovSettings) return;\r\n            \r\n            // Apply raid start bot count\r\n            if (liveTarkovSettings.raidStartBots && liveTarkovSettings.raidStartBots > 0) {\r\n                raidChanges.botCountAdjustments = {\r\n                    min: liveTarkovSettings.raidStartBots,\r\n                    max: liveTarkovSettings.raidStartBots\r\n                };\r\n            }\r\n            \r\n            // Apply wave settings\r\n            if (liveTarkovSettings.waveBots && liveTarkovSettings.maxWaves) {\r\n                raidChanges.waveSettings = {\r\n                    count: liveTarkovSettings.maxWaves,\r\n                    delay: 300, // 5 minutes between waves\r\n                    botsPerWave: liveTarkovSettings.waveBots\r\n                };\r\n            }\r\n            \r\n            this.logger.info(`Applied raid changes for ${location}`);\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error applying map raid changes: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Check if bot is in a specific zone\r\n    private isBotInZone(bot: any, zone: any): boolean {\r\n        try {\r\n            // Simple distance check - in real implementation this would use proper zone boundaries\r\n            const botPos = bot.Position || { x: 0, y: 0, z: 0 };\r\n            const zoneCenter = zone.center || { x: 0, y: 0, z: 0 };\r\n            const radius = zone.radius || 100;\r\n            \r\n            const distance = Math.sqrt(\r\n                Math.pow(botPos.x - zoneCenter.x, 2) +\r\n                Math.pow(botPos.y - zoneCenter.y, 2) +\r\n                Math.pow(botPos.z - zoneCenter.z, 2)\r\n            );\r\n            \r\n            return distance <= radius;\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error checking bot zone: ${error}`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Remove bot from raid (for exclusion zones)\r\n    private removeBotFromRaid(bot: any): void {\r\n        try {\r\n            if (this.botController && this.botController.removeBot) {\r\n                this.botController.removeBot(bot._id);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error removing bot from raid: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear restrictions to spawned bot\r\n    private applyGearRestrictionsToBot(bot: any, restrictions: any): void {\r\n        try {\r\n            if (!bot.inventory) return;\r\n            \r\n            // Apply weapon restrictions\r\n            if (restrictions.weapons && bot.inventory.equipment) {\r\n                bot.inventory.equipment.weapon = restrictions.weapons;\r\n            }\r\n            \r\n            // Apply armor restrictions\r\n            if (restrictions.armor && bot.inventory.equipment) {\r\n                bot.inventory.equipment.armor = restrictions.armor;\r\n            }\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`Error applying gear restrictions to bot: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify bot types in the database\r\n    private modifyBotTypes(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const database = this.databaseServer.getTables();\r\n            let modifiedCount = 0;\r\n\r\n            for (const [botType, botConfig] of Object.entries(config.botTypeSettings || {})) {\r\n                if (!botConfig || !botConfig.enabled) {\r\n                    continue;\r\n                }\r\n\r\n                const dbBotType = database.bots.types[botType];\r\n                if (!dbBotType) {\r\n                    continue; // Don't spam warnings for missing bot types\r\n                }\r\n\r\n                // Apply gear tier restrictions\r\n                this.applyGearTierRestrictions(dbBotType, botConfig);\r\n                \r\n                // Apply difficulty settings\r\n                this.applyDifficultySettings(dbBotType, botConfig);\r\n\r\n                // Apply live Tarkov behavior\r\n                this.applyBotBehaviorSettings(dbBotType, botConfig);\r\n\r\n                modifiedCount++;\r\n            }\r\n\r\n            // Show simple summary\r\n            if (modifiedCount > 0) {\r\n                this.logger.info(`Modified ${modifiedCount} bot types`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error modifying bot types: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear tier restrictions to bot types\r\n    private applyGearTierRestrictions(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.gearRestrictions) return;\r\n\r\n            const restrictions = botConfig.gearRestrictions;\r\n            \r\n            // Apply weapon restrictions\r\n            if (restrictions.weapons) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.equipment = dbBotType.inventory.equipment || {};\r\n                dbBotType.inventory.equipment.weapon = restrictions.weapons;\r\n            }\r\n\r\n            // Apply armor restrictions\r\n            if (restrictions.armor) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.equipment = dbBotType.inventory.equipment || {};\r\n                dbBotType.inventory.equipment.armor = restrictions.armor;\r\n            }\r\n\r\n            // Apply item restrictions\r\n            if (restrictions.items) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.items = restrictions.items;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying gear restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply difficulty settings to bot types\r\n    private applyDifficultySettings(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.difficulty) return;\r\n\r\n            const difficulty = botConfig.difficulty;\r\n            \r\n            // Set bot difficulty\r\n            dbBotType.difficulty = difficulty;\r\n            \r\n            // Apply difficulty-based behavior\r\n            this.applyDifficultyBasedBehavior(dbBotType, difficulty);\r\n        } catch (error) {\r\n            this.logger.error(`Error applying difficulty settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply difficulty-based behavior modifications\r\n    private applyDifficultyBasedBehavior(dbBotType: any, difficulty: string): void {\r\n        try {\r\n            // Modify bot behavior based on difficulty\r\n            switch (difficulty) {\r\n                case \"easy\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.max(0.1, (dbBotType.skills.aiming || 0.5) * 0.7);\r\n                    dbBotType.skills.recoil = Math.max(0.1, (dbBotType.skills.recoil || 0.5) * 0.7);\r\n                    break;\r\n                case \"normal\":\r\n                    // Keep default values\r\n                    break;\r\n                case \"hard\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.min(1.0, (dbBotType.skills.aiming || 0.5) * 1.3);\r\n                    dbBotType.skills.recoil = Math.min(1.0, (dbBotType.skills.recoil || 0.5) * 1.3);\r\n                    break;\r\n                case \"impossible\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.min(1.0, (dbBotType.skills.aiming || 0.5) * 1.5);\r\n                    dbBotType.skills.recoil = Math.min(1.0, (dbBotType.skills.recoil || 0.5) * 1.5);\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying difficulty-based behavior: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply live Tarkov behavior settings\r\n    private applyBotBehaviorSettings(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.liveTarkovBehavior) return;\r\n\r\n            const behavior = botConfig.liveTarkovBehavior;\r\n            \r\n            // Apply behavior modifications\r\n            if (behavior.aggressive) {\r\n                dbBotType.aggression = Math.min(1.0, (dbBotType.aggression || 0.5) * 1.2);\r\n            }\r\n            \r\n            if (behavior.cautious) {\r\n                dbBotType.aggression = Math.max(0.1, (dbBotType.aggression || 0.5) * 0.8);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying bot behavior settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear progression system\r\n    private applyGearProgression(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.enabled) return;\r\n            \r\n            this.logger.info(\"Applying gear progression system...\");\r\n            \r\n            // Apply level-based gear scaling to PMCs\r\n            this.applyPMCGearProgression();\r\n            \r\n            // Apply meta ammo enforcement\r\n            this.applyMetaAmmoEnforcement();\r\n            \r\n            this.logger.info(\"Gear progression system applied successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`Error applying gear progression: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply PMC gear progression based on level\r\n    private applyPMCGearProgression(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.progressionTiers) return;\r\n            \r\n            const progression = gearProgression.progressionTiers;\r\n            \r\n            // Apply level-based gear scaling\r\n            for (const [level, gearConfig] of Object.entries(progression)) {\r\n                const minLevel = parseInt(level);\r\n                if (isNaN(minLevel)) continue;\r\n                \r\n                // This would be applied when PMCs are spawned based on their level\r\n                // For now, we just store the configuration\r\n                this.logger.info(`Configured gear progression for level ${minLevel}+`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying PMC gear progression: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply meta ammo enforcement\r\n    private applyMetaAmmoEnforcement(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.metaAmmoTypes) return;\r\n            \r\n            const metaAmmoTypes = gearProgression.metaAmmoTypes;\r\n            \r\n            if (metaAmmoTypes.length > 0) {\r\n                this.logger.info(`Meta ammo enforcement enabled with ${metaAmmoTypes.length} ammo types`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying meta ammo enforcement: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Get spawn statistics for monitoring\r\n    public getSpawnStatistics(): any {\r\n        try {\r\n            const stats = {\r\n                totalBots: 0,\r\n                modifiedBots: 0,\r\n                gearProgressionEnabled: this.configManager.isGearProgressionEnabled(),\r\n                spawnControlEnabled: !!this.botSpawnService,\r\n                locationControlEnabled: !!this.locationController\r\n            };\r\n            \r\n            return stats;\r\n        } catch (error) {\r\n            this.logger.error(`Error getting spawn statistics: ${error}`);\r\n            return {};\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
