{
  "version": 3,
  "sources": ["SpawnManager.ts"],
  "sourcesContent": ["import { DatabaseServer, Logger } from \"./types/spt-types\";\r\nimport { ConfigManager } from \"./ConfigManager\";\r\n\r\nexport class SpawnManager {\r\n    private databaseServer: DatabaseServer;\r\n    private configManager: ConfigManager;\r\n    private logger: Logger;\r\n\r\n    constructor(\r\n        databaseServer: DatabaseServer,\r\n        configManager: ConfigManager,\r\n        logger: Logger\r\n    ) {\r\n        this.databaseServer = databaseServer;\r\n        this.configManager = configManager;\r\n        this.logger = logger;\r\n    }\r\n\r\n    public initialize(): void {\r\n        try {\r\n            this.logger.info(\"Initializing SpawnManager...\");\r\n            \r\n            // Apply custom spawn configurations\r\n            this.applyCustomSpawnConfig();\r\n            \r\n            this.logger.info(\"SpawnManager initialized successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`Error initializing SpawnManager: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply custom spawn configurations to the database\r\n    public applyCustomSpawnConfig(): void {\r\n        try {\r\n            // Modify bot types in the database\r\n            this.modifyBotTypes();\r\n            \r\n            // Apply spawn rate configurations\r\n            this.applySpawnRateConfigurations();\r\n            \r\n            // Apply boss spawn configurations\r\n            this.applyBossSpawnConfigurations();\r\n            \r\n            // Apply map-specific spawn configurations\r\n            this.applyMapSpawnConfigurations();\r\n            \r\n            // Apply gear progression if enabled\r\n            if (this.configManager.isGearProgressionEnabled()) {\r\n                this.applyGearProgression();\r\n            }\r\n            \r\n            this.logger.info(\"Live Tarkov spawn configuration completed\");\r\n        } catch (error) {\r\n            this.logger.error(`Error applying custom spawn config: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Modify bot types in the database\r\n    private modifyBotTypes(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const database = this.databaseServer.getTables();\r\n            let modifiedCount = 0;\r\n            const modifiedTypes: string[] = [];\r\n\r\n            for (const [botType, botConfig] of Object.entries(config.botTypeSettings || {})) {\r\n                if (!botConfig || !botConfig.enabled) {\r\n                    continue;\r\n                }\r\n\r\n                const dbBotType = database.bots.types[botType];\r\n                if (!dbBotType) {\r\n                    this.logger.warn(`Bot type ${botType} not found in database`);\r\n                    continue;\r\n                }\r\n\r\n                // Apply gear tier restrictions\r\n                this.applyGearTierRestrictions(dbBotType, botConfig);\r\n                \r\n                // Apply difficulty settings\r\n                this.applyDifficultySettings(dbBotType, botConfig);\r\n\r\n                // Apply live Tarkov behavior\r\n                this.applyBotBehaviorSettings(dbBotType, botConfig);\r\n\r\n                modifiedCount++;\r\n                modifiedTypes.push(botType);\r\n            }\r\n\r\n            // Show summary instead of individual logs\r\n            if (modifiedCount > 0) {\r\n                this.logger.info(`Modified ${modifiedCount} bot types: ${modifiedTypes.join(', ')}`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error modifying bot types: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear tier restrictions to bot types\r\n    private applyGearTierRestrictions(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.gearRestrictions) return;\r\n\r\n            const restrictions = botConfig.gearRestrictions;\r\n            \r\n            // Apply weapon restrictions\r\n            if (restrictions.weapons) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.equipment = dbBotType.inventory.equipment || {};\r\n                dbBotType.inventory.equipment.weapon = restrictions.weapons;\r\n            }\r\n\r\n            // Apply armor restrictions\r\n            if (restrictions.armor) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.equipment = dbBotType.inventory.equipment || {};\r\n                dbBotType.inventory.equipment.armor = restrictions.armor;\r\n            }\r\n\r\n            // Apply item restrictions\r\n            if (restrictions.items) {\r\n                dbBotType.inventory = dbBotType.inventory || {};\r\n                dbBotType.inventory.items = restrictions.items;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying gear restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply difficulty settings to bot types\r\n    private applyDifficultySettings(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.difficulty) return;\r\n\r\n            const difficulty = botConfig.difficulty;\r\n            \r\n            // Set bot difficulty\r\n            dbBotType.difficulty = difficulty;\r\n            \r\n            // Apply difficulty-based behavior\r\n            this.applyDifficultyBasedBehavior(dbBotType, difficulty);\r\n        } catch (error) {\r\n            this.logger.error(`Error applying difficulty settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply difficulty-based behavior modifications\r\n    private applyDifficultyBasedBehavior(dbBotType: any, difficulty: string): void {\r\n        try {\r\n            // Modify bot behavior based on difficulty\r\n            switch (difficulty) {\r\n                case \"easy\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.max(0.1, (dbBotType.skills.aiming || 0.5) * 0.7);\r\n                    dbBotType.skills.recoil = Math.max(0.1, (dbBotType.skills.recoil || 0.5) * 0.7);\r\n                    break;\r\n                case \"normal\":\r\n                    // Keep default values\r\n                    break;\r\n                case \"hard\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.min(1.0, (dbBotType.skills.aiming || 0.5) * 1.3);\r\n                    dbBotType.skills.recoil = Math.min(1.0, (dbBotType.skills.recoil || 0.5) * 1.3);\r\n                    break;\r\n                case \"impossible\":\r\n                    dbBotType.skills = dbBotType.skills || {};\r\n                    dbBotType.skills.aiming = Math.min(1.0, (dbBotType.skills.aiming || 0.5) * 1.5);\r\n                    dbBotType.skills.recoil = Math.min(1.0, (dbBotType.skills.recoil || 0.5) * 1.5);\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying difficulty-based behavior: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply live Tarkov behavior settings\r\n    private applyBotBehaviorSettings(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.liveTarkovBehavior) return;\r\n\r\n            const behavior = botConfig.liveTarkovBehavior;\r\n            \r\n            // Apply behavior modifications\r\n            if (behavior.aggressive) {\r\n                dbBotType.aggression = Math.min(1.0, (dbBotType.aggression || 0.5) * 1.2);\r\n            }\r\n            \r\n            if (behavior.cautious) {\r\n                dbBotType.aggression = Math.max(0.1, (dbBotType.aggression || 0.5) * 0.8);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying bot behavior settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply gear progression system\r\n    private applyGearProgression(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.enabled) return;\r\n            \r\n            this.logger.info(\"Applying gear progression system...\");\r\n            \r\n            // Apply level-based gear scaling to PMCs\r\n            this.applyPMCGearProgression();\r\n            \r\n            // Apply meta ammo enforcement\r\n            this.applyMetaAmmoEnforcement();\r\n            \r\n            this.logger.info(\"Gear progression system applied successfully\");\r\n        } catch (error) {\r\n            this.logger.error(`Error applying gear progression: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply PMC gear progression based on level\r\n    private applyPMCGearProgression(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.progressionTiers) return;\r\n            \r\n            const progression = gearProgression.progressionTiers;\r\n            \r\n            // Apply level-based gear scaling\r\n            for (const [level, gearConfig] of Object.entries(progression)) {\r\n                const minLevel = parseInt(level);\r\n                if (isNaN(minLevel)) continue;\r\n                \r\n                // This would be applied when PMCs are spawned based on their level\r\n                // For now, we just store the configuration\r\n                this.logger.info(`Configured gear progression for level ${minLevel}+`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying PMC gear progression: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Apply meta ammo enforcement\r\n    private applyMetaAmmoEnforcement(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const gearProgression = config.globalSettings?.gearProgression;\r\n            \r\n            if (!gearProgression || !gearProgression.metaAmmoTypes) return;\r\n            \r\n            const metaAmmoTypes = gearProgression.metaAmmoTypes;\r\n            \r\n            if (metaAmmoTypes.length > 0) {\r\n                this.logger.info(`Meta ammo enforcement enabled with ${metaAmmoTypes.length} ammo types`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Error applying meta ammo enforcement: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Get spawn statistics for monitoring\r\n    public getSpawnStatistics(): any {\r\n        try {\r\n            const stats = {\r\n                totalBots: 0,\r\n                modifiedBots: 0,\r\n                gearProgressionEnabled: this.configManager.isGearProgressionEnabled()\r\n            };\r\n            \r\n            return stats;\r\n        } catch (error) {\r\n            this.logger.error(`Error getting spawn statistics: ${error}`);\r\n            return {};\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
