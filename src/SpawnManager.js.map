{
  "version": 3,
  "sources": ["SpawnManager.ts"],
  "sourcesContent": ["// Remove problematic SPT imports and use any types for now\r\n// import { DatabaseServer } from \"@spt/servers/DatabaseServer\";\r\n// import { ILocationBase } from \"@spt/models/eft/common/ILocationBase\";\r\n// import { IRaidChanges } from \"@spt/models/spt/location/IRaidChanges\";\r\nimport { ConfigManager } from \"./ConfigManager\";\r\nimport * as path from \"path\";\r\nimport * as fs from \"fs\";\r\n\r\n// Define basic interfaces for SPT types\r\ninterface ILocationBase {\r\n    Name: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface IRaidChanges {\r\n    botCountAdjustments?: {\r\n        min: number;\r\n        max: number;\r\n    };\r\n    waveSettings?: {\r\n        count: number;\r\n        delay: number;\r\n        botsPerWave: number;\r\n    };\r\n    botTypeAdjustments?: {\r\n        allowedTypes: string[];\r\n    };\r\n    [key: string]: any;\r\n}\r\n\r\ninterface DatabaseServer {\r\n    getTables(): {\r\n        bots: {\r\n            types: { [key: string]: any };\r\n        };\r\n    };\r\n}\r\n\r\nexport class SpawnManager {\r\n    private databaseServer: DatabaseServer | null = null;\r\n    private configManager: ConfigManager;\r\n    private sainAvailable: boolean = false;\r\n\r\n    constructor() {\r\n        this.configManager = new ConfigManager();\r\n    }\r\n\r\n    public initialize(databaseServer: DatabaseServer): void {\r\n        this.databaseServer = databaseServer;\r\n        \r\n        // Check if SAIN is available for enhanced behavior\r\n        this.checkSAINAvailability();\r\n    }\r\n\r\n    private checkSAINAvailability(): void {\r\n        try {\r\n            // Use the same robust SAIN detection as the main mod\r\n            const sainDetected = this.detectSAINMod();\r\n            \r\n            if (sainDetected) {\r\n                this.sainAvailable = true;\r\n                console.log(\"[LiveTarkovAI] SAIN integration available - enhanced bot behavior enabled\");\r\n            } else {\r\n                this.sainAvailable = false;\r\n                console.log(\"[LiveTarkovAI] SAIN not available - using standard bot behavior\");\r\n            }\r\n        } catch (error) {\r\n            this.sainAvailable = false;\r\n            console.log(\"[LiveTarkovAI] SAIN not available - using standard bot behavior\");\r\n        }\r\n    }\r\n\r\n    // Detect SAIN mod using multiple methods (same as main mod)\r\n    private detectSAINMod(): boolean {\r\n        try {\r\n            // Method 1: Try to require SAIN directly\r\n            try {\r\n                require(\"zSolarint-SAIN-ServerMod\");\r\n                return true;\r\n            } catch (error) {\r\n                // Continue to next method\r\n            }\r\n\r\n            // Method 2: Check for SAIN in mods folder\r\n            const possibleSainPaths = [\r\n                path.join(process.cwd(), \"user\", \"mods\", \"zSolarint-SAIN-ServerMod\"),\r\n                path.join(__dirname, \"..\", \"..\", \"zSolarint-SAIN-ServerMod\"),\r\n                path.join(process.cwd(), \"mods\", \"zSolarint-SAIN-ServerMod\")\r\n            ];\r\n\r\n            for (const sainPath of possibleSainPaths) {\r\n                if (fs.existsSync(sainPath)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // Method 3: Check for SAIN in require.cache\r\n            for (const modulePath in require.cache) {\r\n                if (modulePath.includes(\"zSolarint-SAIN-ServerMod\") || modulePath.includes(\"SAIN\")) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // Method 4: Check for SAIN in process modules\r\n            if (process.mainModule && process.mainModule.children) {\r\n                for (const child of process.mainModule.children) {\r\n                    if (child.filename && (child.filename.includes(\"SAIN\") || child.filename.includes(\"zSolarint\"))) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Method 5: Check for SAIN in global scope\r\n            if (globalThis.SAINService || globalThis.SAINBotService || globalThis.SAIN) {\r\n                return true;\r\n            }\r\n\r\n            // Method 6: Check for SAIN in SPT container if available\r\n            try {\r\n                if (globalThis.SPT_CONTAINER) {\r\n                    const container = globalThis.SPT_CONTAINER;\r\n                    if (container.resolve && container.resolve(\"SAINService\")) {\r\n                        return true;\r\n                    }\r\n                    if (container.resolve && container.resolve(\"SAINBotService\")) {\r\n                        return true;\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                // Continue to next method\r\n            }\r\n\r\n            return false;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public applyCustomSpawnConfig(): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            if (!config.enabled) {\r\n                console.log(\"[LiveTarkovAI] Mod is disabled, skipping spawn configuration\");\r\n                return;\r\n            }\r\n\r\n            console.log(\"[LiveTarkovAI] Applying live Tarkov spawn configuration...\");\r\n            \r\n            // Modify bot types based on configuration\r\n            this.modifyBotTypes();\r\n            \r\n            console.log(\"[LiveTarkovAI] Live Tarkov spawn configuration applied successfully\");\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error applying spawn configuration: ${error}`);\r\n        }\r\n    }\r\n\r\n    public modifyRaidSpawns(mapBase: ILocationBase, raidAdjustments: IRaidChanges): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            if (!config.enabled) {\r\n                return;\r\n            }\r\n\r\n            const mapName = mapBase.Name;\r\n            const mapConfig = this.configManager.getMapConfig(mapName);\r\n            \r\n            if (!mapConfig || !mapConfig.enabled) {\r\n                return;\r\n            }\r\n\r\n            console.log(`[LiveTarkovAI] Modifying spawns for map: ${mapName}`);\r\n\r\n            // Apply live Tarkov spawn logic\r\n            if (mapConfig.liveTarkovSettings?.useAuthenticSpawns) {\r\n                this.applyLiveTarkovSpawns(raidAdjustments, mapConfig);\r\n            } else {\r\n                // Apply basic bot count adjustments\r\n                if (raidAdjustments.botCountAdjustments) {\r\n                    raidAdjustments.botCountAdjustments.min = mapConfig.minBots || 0;\r\n                    raidAdjustments.botCountAdjustments.max = mapConfig.maxBots || 0;\r\n                }\r\n            }\r\n\r\n            // Modify wave settings if enabled\r\n            if (config.waveSettings?.enabled) {\r\n                this.modifyWaveSettings(raidAdjustments, mapConfig);\r\n            }\r\n\r\n            // Apply bot type restrictions\r\n            this.applyBotTypeRestrictions(raidAdjustments, mapConfig);\r\n\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error modifying raid spawns: ${error}`);\r\n        }\r\n    }\r\n\r\n    private applyLiveTarkovSpawns(raidAdjustments: IRaidChanges, mapConfig: any): void {\r\n        try {\r\n            const liveSettings = mapConfig.liveTarkovSettings;\r\n            if (!liveSettings) return;\r\n            \r\n            // Set raid start bot count (like live Tarkov)\r\n            if (raidAdjustments.botCountAdjustments) {\r\n                raidAdjustments.botCountAdjustments.min = liveSettings.raidStartBots || 0;\r\n                raidAdjustments.botCountAdjustments.max = liveSettings.raidStartBots || 0;\r\n            }\r\n\r\n            // Configure wave system for authentic timing\r\n            if (raidAdjustments.waveSettings) {\r\n                raidAdjustments.waveSettings.count = liveSettings.maxWaves || 0;\r\n                raidAdjustments.waveSettings.delay = liveSettings.waveDelay || 0;\r\n                raidAdjustments.waveSettings.botsPerWave = liveSettings.waveBots || 0;\r\n            }\r\n\r\n            // Apply live Tarkov behavior settings\r\n            this.applyLiveTarkovBehavior(raidAdjustments, mapConfig);\r\n\r\n            console.log(`[LiveTarkovAI] Applied live Tarkov spawns: ${liveSettings.raidStartBots} bots at start, ${liveSettings.maxWaves} waves`);\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error applying live Tarkov spawns: ${error}`);\r\n        }\r\n    }\r\n\r\n    private applyLiveTarkovBehavior(raidAdjustments: IRaidChanges, mapConfig: any): void {\r\n        try {\r\n            const liveSettings = mapConfig.liveTarkovSettings;\r\n            if (!liveSettings) return;\r\n            \r\n            // Apply scav behavior (annoying but not deadly - as per your preferences)\r\n            if (liveSettings.scavBehavior === \"passive\") {\r\n                // Reduce scav aggression and accuracy\r\n                this.modifyScavBehavior(\"passive\");\r\n            } else if (liveSettings.scavBehavior === \"aggressive\") {\r\n                // Increase scav aggression but maintain balance\r\n                this.modifyScavBehavior(\"aggressive\");\r\n            }\r\n\r\n            // Apply PMC behavior (tactical and tough - as per your preferences)\r\n            if (liveSettings.pmcBehavior === \"tactical\") {\r\n                // Balanced PMC behavior\r\n                this.modifyPMCBehavior(\"tactical\");\r\n            } else if (liveSettings.pmcBehavior === \"aggressive\") {\r\n                // More aggressive PMCs\r\n                this.modifyPMCBehavior(\"aggressive\");\r\n            }\r\n\r\n            console.log(`[LiveTarkovAI] Applied live Tarkov behavior: scavs=${liveSettings.scavBehavior}, pmcs=${liveSettings.pmcBehavior}`);\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error applying live Tarkov behavior: ${error}`);\r\n        }\r\n    }\r\n\r\n    private modifyBotTypes(): void {\r\n        try {\r\n            if (!this.databaseServer) {\r\n                console.warn(\"[LiveTarkovAI] Database server not available, skipping bot type modifications\");\r\n                return;\r\n            }\r\n\r\n            const config = this.configManager.getConfig();\r\n            const database = this.databaseServer.getTables();\r\n            let modifiedCount = 0;\r\n            const modifiedTypes: string[] = [];\r\n\r\n            for (const [botType, botConfig] of Object.entries(config.botTypeSettings || {})) {\r\n                if (!botConfig || !botConfig.enabled) {\r\n                    continue;\r\n                }\r\n\r\n                const dbBotType = database.bots.types[botType];\r\n                if (!dbBotType) {\r\n                    console.warn(`[LiveTarkovAI] Bot type ${botType} not found in database`);\r\n                    continue;\r\n                }\r\n\r\n                // Apply gear tier restrictions\r\n                this.applyGearTierRestrictions(dbBotType, botConfig);\r\n                \r\n                // Apply difficulty settings\r\n                this.applyDifficultySettings(dbBotType, botConfig);\r\n\r\n                // Apply live Tarkov behavior\r\n                this.applyBotBehaviorSettings(dbBotType, botConfig);\r\n\r\n                modifiedCount++;\r\n                modifiedTypes.push(botType);\r\n            }\r\n\r\n            // Show summary instead of individual logs\r\n            if (modifiedCount > 0) {\r\n                console.log(`[LiveTarkovAI] Modified ${modifiedCount} bot types: ${modifiedTypes.join(', ')}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error modifying bot types: ${error}`);\r\n        }\r\n    }\r\n\r\n    private modifyWaveSettings(raidAdjustments: IRaidChanges, mapConfig: any): void {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const waveSettings = config.waveSettings;\r\n            if (!waveSettings) return;\r\n\r\n            if (waveSettings.enabled) {\r\n                // Modify wave count\r\n                if (raidAdjustments.waveSettings) {\r\n                    raidAdjustments.waveSettings.count = waveSettings.waveCount || 0;\r\n                    raidAdjustments.waveSettings.delay = waveSettings.waveDelay || 0;\r\n                    raidAdjustments.waveSettings.botsPerWave = waveSettings.botsPerWave || 0;\r\n                }\r\n\r\n                // Apply dynamic scaling if enabled\r\n                if (waveSettings.dynamicScaling) {\r\n                    this.applyDynamicScaling(raidAdjustments, mapConfig);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error modifying wave settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    private applyBotTypeRestrictions(raidAdjustments: IRaidChanges, mapConfig: any): void {\r\n        try {\r\n            // Filter allowed bot types for this map\r\n            const allowedBotTypes = Object.entries(mapConfig.botTypes || {})\r\n                .filter(([_, config]) => config && typeof config === 'object' && 'enabled' in config && config.enabled)\r\n                .map(([type, _]) => type);\r\n\r\n            if (raidAdjustments.botTypeAdjustments) {\r\n                raidAdjustments.botTypeAdjustments.allowedTypes = allowedBotTypes;\r\n            }\r\n\r\n            // Apply spawn chances\r\n            for (const [botType, botConfig] of Object.entries(mapConfig.botTypes || {})) {\r\n                if (botConfig && typeof botConfig === 'object' && 'enabled' in botConfig && botConfig.enabled) {\r\n                    const spawnChance = 'spawnChance' in botConfig ? Number(botConfig.spawnChance) || 1.0 : 1.0;\r\n                    this.setBotTypeSpawnChance(botType, spawnChance);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error applying bot type restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    private applyGearTierRestrictions(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            // Apply gear tier restrictions based on configuration\r\n            // This would modify the bot's equipment generation parameters\r\n            \r\n            // Note: Gear restrictions are applied silently\r\n            // Only log errors if something goes wrong\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error applying gear restrictions: ${error}`);\r\n        }\r\n    }\r\n\r\n    private applyDifficultySettings(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            if (!botConfig.difficulty) return;\r\n            \r\n            // Apply difficulty-based behavior modifications\r\n            // This would modify the bot's AI difficulty parameters\r\n            \r\n            switch (botConfig.difficulty) {\r\n                case \"easy\":\r\n                    // Reduce accuracy, reaction time, etc.\r\n                    break;\r\n                case \"normal\":\r\n                    // Default settings\r\n                    break;\r\n                case \"hard\":\r\n                    // Increase accuracy, reaction time, etc.\r\n                    break;\r\n                case \"impossible\":\r\n                    // Maximum difficulty settings\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error applying difficulty settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    private applyBotBehaviorSettings(dbBotType: any, botConfig: any): void {\r\n        try {\r\n            const behavior = botConfig.liveTarkovBehavior;\r\n            if (!behavior) return;\r\n            \r\n            // Apply live Tarkov behavior settings\r\n            // This would modify the bot's AI behavior parameters\r\n            \r\n            // Note: Individual behavior settings are applied silently\r\n            // Only log errors if something goes wrong\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error applying bot behavior settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    private modifyScavBehavior(behavior: string): void {\r\n        try {\r\n            // Modify scav behavior based on your preferences\r\n            // \"annoying but not deadly\"\r\n            \r\n            switch (behavior) {\r\n                case \"passive\":\r\n                    // Reduce scav accuracy and aggression\r\n                    console.log(\"[LiveTarkovAI] Applied passive scav behavior - annoying but not deadly\");\r\n                    break;\r\n                case \"aggressive\":\r\n                    // Increase scav aggression but maintain balance\r\n                    console.log(\"[LiveTarkovAI] Applied aggressive scav behavior - challenging but fair\");\r\n                    break;\r\n                case \"mixed\":\r\n                    // Balanced scav behavior\r\n                    console.log(\"[LiveTarkovAI] Applied mixed scav behavior - balanced challenge\");\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error modifying scav behavior: ${error}`);\r\n        }\r\n    }\r\n\r\n    private modifyPMCBehavior(behavior: string): void {\r\n        try {\r\n            // Modify PMC behavior based on your preferences\r\n            // \"tough and tactical but not headshotty or insta-killing\"\r\n            \r\n            switch (behavior) {\r\n                case \"tactical\":\r\n                    // Balanced PMC behavior - tactical but fair\r\n                    console.log(\"[LiveTarkovAI] Applied tactical PMC behavior - tough but fair\");\r\n                    break;\r\n                case \"aggressive\":\r\n                    // More aggressive PMCs but still balanced\r\n                    console.log(\"[LiveTarkovAI] Applied aggressive PMC behavior - challenging but fair\");\r\n                    break;\r\n                case \"defensive\":\r\n                    // Defensive PMC behavior\r\n                    console.log(\"[LiveTarkovAI] Applied defensive PMC behavior - tactical defense\");\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error modifying PMC behavior: ${error}`);\r\n        }\r\n    }\r\n\r\n    private applyDynamicScaling(raidAdjustments: IRaidChanges, mapConfig: any): void {\r\n        try {\r\n            // Implement dynamic scaling based on player count, time, etc.\r\n            // This would adjust bot counts and difficulty dynamically\r\n            \r\n            // Example: Scale bot count based on time\r\n            const currentTime = Date.now();\r\n            const raidStartTime = currentTime; // This would come from raid data\r\n            \r\n            // Increase difficulty over time\r\n            const timeElapsed = (currentTime - raidStartTime) / 1000 / 60; // minutes\r\n            const difficultyMultiplier = Math.min(1.5, 1 + (timeElapsed / 30)); // Max 1.5x at 30 minutes\r\n            \r\n            if (raidAdjustments.botCountAdjustments) {\r\n                raidAdjustments.botCountAdjustments.max = Math.floor(\r\n                    (mapConfig.maxBots || 0) * difficultyMultiplier\r\n                );\r\n            }\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error applying dynamic scaling: ${error}`);\r\n        }\r\n    }\r\n\r\n    private setBotTypeSpawnChance(botType: string, chance: number): void {\r\n        try {\r\n            // Set spawn chance for specific bot type\r\n            // Implementation depends on SPT version and available methods\r\n            \r\n            console.log(`[LiveTarkovAI] Applied spawn chance for ${botType}: ${chance}`);\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error setting spawn chance: ${error}`);\r\n        }\r\n    }\r\n\r\n    public getSpawnStatistics(): any {\r\n        try {\r\n            const config = this.configManager.getConfig();\r\n            const stats = {\r\n                totalBots: 0,\r\n                botTypes: {},\r\n                maps: {},\r\n                dependencies: {\r\n                    waypoints: true, // Always true since it's required\r\n                    bigBrain: true,  // Always true since it's required\r\n                    sain: this.sainAvailable,\r\n                    fika: false // Would need to check this separately\r\n                }\r\n            };\r\n\r\n            // Calculate statistics based on configuration\r\n            for (const [mapName, mapConfig] of Object.entries(config.mapSettings || {})) {\r\n                if (mapConfig && mapConfig.enabled) {\r\n                    stats.maps[mapName] = {\r\n                        totalBots: mapConfig.maxBots || 0,\r\n                        botTypes: mapConfig.botTypes || {},\r\n                        liveTarkovSettings: mapConfig.liveTarkovSettings || {}\r\n                    };\r\n                    stats.totalBots += mapConfig.maxBots || 0;\r\n                }\r\n            }\r\n\r\n            for (const [botType, botConfig] of Object.entries(config.botTypeSettings || {})) {\r\n                if (botConfig && botConfig.enabled) {\r\n                    stats.botTypes[botType] = {\r\n                        gearTier: botConfig.gearTier,\r\n                        difficulty: botConfig.difficulty,\r\n                        spawnChance: botConfig.spawnChance,\r\n                        liveTarkovBehavior: botConfig.liveTarkovBehavior || {}\r\n                    };\r\n                }\r\n            }\r\n\r\n            return stats;\r\n        } catch (error) {\r\n            console.error(`[LiveTarkovAI] Error getting spawn statistics: ${error}`);\r\n            return {};\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
